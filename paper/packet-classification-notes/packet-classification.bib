% Example bibliography items of types that I do not use very often,
% so nice to keep around examples to copy, paste, and modify.

@online{TUGInstmem,
  key =          {TUG},
  year  =        2017,
  title =        "Institutional members of the {\TeX} Users Group",
  url =          "http://wwtug.org/instmem.html",
  lastaccessed = "May 27, 2017",
}

@online{CTANacmart,
  author =    {Boris Veytsman},
  title =  {acmart---{C}lass for typesetting publications of {ACM}},
  year = 2017,
  url =    {http://www.ctan.org/pkg/acmart},
  lastaccessed = {May 27, 2017}
}

@MANUAL{Fear05,
  title =        {Publication quality tables in {\LaTeX}},
  author =       {Simon Fear},
  month =        {April},
  year =         2005,
  note =         {\url{http://www.ctan.org/pkg/booktabs}}
}

@ArtifactSoftware{R,
    title = {R: A Language and Environment for Statistical Computing},
    author = {{R Core Team}},
    organization = {R Foundation for Statistical Computing},
    address = {Vienna, Austria},
    year = {2019},
    url = {https://www.R-project.org/},
}

@ArtifactDataset{UMassCitations,
 author    =  {Sam Anzaroot and Andrew McCallum},
 title     =  {{UMass} Citation Field Extraction Dataset},
 year      = 2013,
 url       = {http://www.iesl.cs.umass.edu/data/data-umasscitationfield},
 lastaccessed = {May 27, 2019}
}

@Eprint{Bornmann2019,
       author = {Bornmann, Lutz and Wray, K. Brad and Haunschild,
                  Robin},
        title = {Citation concept analysis {(CCA)}---A new form of
                  citation analysis revealing the usefulness of
                  concepts for other researchers illustrated by two
                  exemplary case studies including classic books by
                  {Thomas S.~Kuhn} and {Karl R.~Popper}},
     keywords = {Computer Science - Digital Libraries},
         year = 2019,
        month = "May",
          eid = {arXiv:1905.12410},
archivePrefix = {arXiv},
       eprint = {1905.12410},
 primaryClass = {cs.DL},
}

@Eprint{AnzarootPBM14,
  author    = {Sam Anzaroot and
               Alexandre Passos and
               David Belanger and
               Andrew McCallum},
  title     = {Learning Soft Linear Constraints with Application to
                  Citation Field Extraction},
  year      = {2014},
  archivePrefix = {arXiv},
  eprint    = {1403.1349},
}

% Journals

% First the Full Name is given, then the abbreviation used in the AMS Math
% Reviews, with an indication if it could not be found there.
% Note the 2nd overwrites the 1st, so swap them if you want the full name.

 %{AMS}
 @String{AMSTrans = "American Mathematical Society Translations" }
 @String{AMSTrans = "Amer. Math. Soc. Transl." }
 @String{BullAMS = "Bulletin of the American Mathematical Society" }
 @String{BullAMS = "Bull. Amer. Math. Soc." }
 @String{ProcAMS = "Proceedings of the American Mathematical Society" }
 @String{ProcAMS = "Proc. Amer. Math. Soc." }
 @String{TransAMS = "Transactions of the American Mathematical Society" }
 @String{TransAMS = "Trans. Amer. Math. Soc." }

 %ACM
 @String{CACM = "Communications of the {ACM}" }
 @String{CACM = "Commun. {ACM}" }
 @String{CompServ = "Comput. Surveys" }
 @String{JACM = "J. ACM" }
 @String{ACMMathSoft = "{ACM} Transactions on Mathematical Software" }
 @String{ACMMathSoft = "{ACM} Trans. Math. Software" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newsletter" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newslett." }

 @String{AmerSocio = "American Journal of Sociology" }
 @String{AmerStatAssoc = "Journal of the American Statistical Association" }
 @String{AmerStatAssoc = "J. Amer. Statist. Assoc." }
 @String{ApplMathComp = "Applied Mathematics and Computation" }
 @String{ApplMathComp = "Appl. Math. Comput." }
 @String{AmerMathMonthly = "American Mathematical Monthly" }
 @String{AmerMathMonthly = "Amer. Math. Monthly" }
 @String{BIT = "{BIT}" }
 @String{BritStatPsych = "British Journal of Mathematical and Statistical
          Psychology" }
 @String{BritStatPsych = "Brit. J. Math. Statist. Psych." }
 @String{CanMathBull = "Canadian Mathematical Bulletin" }
 @String{CanMathBull = "Canad. Math. Bull." }
 @String{CompApplMath = "Journal of Computational and Applied Mathematics" }
 @String{CompApplMath = "J. Comput. Appl. Math." }
 @String{CompPhys = "Journal of Computational Physics" }
 @String{CompPhys = "J. Comput. Phys." }
 @String{CompStruct = "Computers and Structures" }
 @String{CompStruct = "Comput. \& Structures" }
 @String{CompJour = "The Computer Journal" }
 @String{CompJour = "Comput. J." }
 @String{CompSysSci = "Journal of Computer and System Sciences" }
 @String{CompSysSci = "J. Comput. System Sci." }
 @String{Computing = "Computing" }
 @String{ContempMath = "Contemporary Mathematics" }
 @String{ContempMath = "Contemp. Math." }
 @String{Crelle = "Crelle's Journal" }
 @String{GiornaleMath = "Giornale di Mathematiche" }
 @String{GiornaleMath = "Giorn. Mat." } % didn't find in AMS MR., ibid.

 %IEEE
 @String{Computer = "{IEEE} Computer" }
 @String{IEEETransComp = "{IEEE} Transactions on Computers" }
 @String{IEEETransComp = "{IEEE} Trans. Comput." }
 @String{IEEETransAC = "{IEEE} Transactions on Automatic Control" }
 @String{IEEETransAC = "{IEEE} Trans. Automat. Control" }
 @String{IEEESpec = "{IEEE} Spectrum" } % didn't find in AMS MR
 @String{ProcIEEE = "Proceedings of the {IEEE}" }
 @String{ProcIEEE = "Proc. {IEEE}" } % didn't find in AMS MR
 @String{IEEETransAeroElec = "{IEEE} Transactions on Aerospace and Electronic
     Systems" }
 @String{IEEETransAeroElec = "{IEEE} Trans. Aerospace Electron. Systems" }

 @String{IMANumerAna = "{IMA} Journal of Numerical Analysis" }
 @String{IMANumerAna = "{IMA} J. Numer. Anal." }
 @String{InfProcLet = "Information Processing Letters" }
 @String{InfProcLet = "Inform. Process. Lett." }
 @String{InstMathApp = "Journal of the Institute of Mathematics and
     its Applications" }
 @String{InstMathApp = "J. Inst. Math. Appl." }
 @String{IntControl = "International Journal of Control" }
 @String{IntControl = "Internat. J. Control" }
 @String{IntNumerEng = "International Journal for Numerical Methods in
     Engineering" }
 @String{IntNumerEng = "Internat. J. Numer. Methods Engrg." }
 @String{IntSuper = "International Journal of Supercomputing Applications" }
 @String{IntSuper = "Internat. J. Supercomputing Applic." } % didn't find
%% in AMS MR
 @String{Kibernetika = "Kibernetika" }
 @String{JResNatBurStand = "Journal of Research of the National Bureau
     of Standards" }
 @String{JResNatBurStand = "J. Res. Nat. Bur. Standards" }
 @String{LinAlgApp = "Linear Algebra and its Applications" }
 @String{LinAlgApp = "Linear Algebra Appl." }
 @String{MathAnaAppl = "Journal of Mathematical Analysis and Applications" }
 @String{MathAnaAppl = "J. Math. Anal. Appl." }
 @String{MathAnnalen = "Mathematische Annalen" }
 @String{MathAnnalen = "Math. Ann." }
 @String{MathPhys = "Journal of Mathematical Physics" }
 @String{MathPhys = "J. Math. Phys." }
 @String{MathComp = "Mathematics of Computation" }
 @String{MathComp = "Math. Comp." }
 @String{MathScand = "Mathematica Scandinavica" }
 @String{MathScand = "Math. Scand." }
 @String{TablesAidsComp = "Mathematical Tables and Other Aids to Computation" }
 @String{TablesAidsComp = "Math. Tables Aids Comput." }
 @String{NumerMath = "Numerische Mathematik" }
 @String{NumerMath = "Numer. Math." }
 @String{PacificMath = "Pacific Journal of Mathematics" }
 @String{PacificMath = "Pacific J. Math." }
 @String{ParDistComp = "Journal of Parallel and Distributed Computing" }
 @String{ParDistComp = "J. Parallel and Distrib. Comput." } % didn't find
%% in AMS MR
 @String{ParComputing = "Parallel Computing" }
 @String{ParComputing = "Parallel Comput." }
 @String{PhilMag = "Philosophical Magazine" }
 @String{PhilMag = "Philos. Mag." }
 @String{ProcNAS = "Proceedings of the National Academy of Sciences
                    of the USA" }
 @String{ProcNAS = "Proc. Nat. Acad. Sci. U. S. A." }
 @String{Psychometrika = "Psychometrika" }
 @String{QuartMath = "Quarterly Journal of Mathematics, Oxford, Series (2)" }
 @String{QuartMath = "Quart. J. Math. Oxford Ser. (2)" }
 @String{QuartApplMath = "Quarterly of Applied Mathematics" }
 @String{QuartApplMath = "Quart. Appl. Math." }
 @String{RevueInstStat = "Review of the International Statisical Institute" }
 @String{RevueInstStat = "Rev. Inst. Internat. Statist." }

 %SIAM
 @String{JSIAM = "Journal of the Society for Industrial and Applied
     Mathematics" }
 @String{JSIAM = "J. Soc. Indust. Appl. Math." }
 @String{JSIAMB = "Journal of the Society for Industrial and Applied
     Mathematics, Series B, Numerical Analysis" }
 @String{JSIAMB = "J. Soc. Indust. Appl. Math. Ser. B Numer. Anal." }
 @String{SIAMAlgMeth = "{SIAM} Journal on Algebraic and Discrete Methods" }
 @String{SIAMAlgMeth = "{SIAM} J. Algebraic Discrete Methods" }
 @String{SIAMAppMath = "{SIAM} Journal on Applied Mathematics" }
 @String{SIAMAppMath = "{SIAM} J. Appl. Math." }
 @String{SIAMComp = "{SIAM} Journal on Computing" }
 @String{SIAMComp = "{SIAM} J. Comput." }
 @String{SIAMMatrix = "{SIAM} Journal on Matrix Analysis and Applications" }
 @String{SIAMMatrix = "{SIAM} J. Matrix Anal. Appl." }
 @String{SIAMNumAnal = "{SIAM} Journal on Numerical Analysis" }
 @String{SIAMNumAnal = "{SIAM} J. Numer. Anal." }
 @String{SIAMReview = "{SIAM} Review" }
 @String{SIAMReview = "{SIAM} Rev." }
 @String{SIAMSciStat = "{SIAM} Journal on Scientific and Statistical
     Computing" }
 @String{SIAMSciStat = "{SIAM} J. Sci. Statist. Comput." }

 @String{SoftPracExp = "Software Practice and Experience" }
 @String{SoftPracExp = "Software Prac. Experience" } % didn't find in AMS MR
 @String{StatScience = "Statistical Science" }
 @String{StatScience = "Statist. Sci." }
 @String{Techno = "Technometrics" }
 @String{USSRCompMathPhys = "{USSR} Computational Mathematics and Mathematical
     Physics" }
 @String{USSRCompMathPhys = "{U. S. S. R.} Comput. Math. and Math. Phys." }
 @String{VLSICompSys = "Journal of {VLSI} and Computer Systems" }
 @String{VLSICompSys = "J. {VLSI} Comput. Syst." }
 @String{ZAngewMathMech = "Zeitschrift fur Angewandte Mathematik und
     Mechanik" }
 @String{ZAngewMathMech = "Z. Angew. Math. Mech." }
 @String{ZAngewMathPhys = "Zeitschrift fur Angewandte Mathematik und Physik" }
 @String{ZAngewMathPhys = "Z. Angew. Math. Phys." }

% Publishers % ================================================= |

 @String{Academic = "Academic Press" }
 @String{ACMPress = "{ACM} Press" }
 @String{AdamHilger = "Adam Hilger" }
 @String{AddisonWesley = "Addison-Wesley" }
 @String{AllynBacon = "Allyn and Bacon" }
 @String{AMS = "American Mathematical Society" }
 @String{Birkhauser = "Birkha{\"u}ser" }
 @String{CambridgePress = "Cambridge University Press" }
 @String{Chelsea = "Chelsea" }
 @String{ClaredonPress = "Claredon Press" }
 @String{DoverPub = "Dover Publications" }
 @String{Eyolles = "Eyolles" }
 @String{HoltRinehartWinston = "Holt, Rinehart and Winston" }
 @String{Interscience = "Interscience" }
 @String{JohnsHopkinsPress = "The Johns Hopkins University Press" }
 @String{JohnWileySons = "John Wiley and Sons" }
 @String{Macmillan = "Macmillan" }
 @String{MathWorks = "The Math Works Inc." }
 @String{McGrawHill = "McGraw-Hill" }
 @String{NatBurStd = "National Bureau of Standards" }
 @String{NorthHolland = "North-Holland" }
 @String{OxfordPress = "Oxford University Press" }  %address Oxford or London?
 @String{PergamonPress = "Pergamon Press" }
 @String{PlenumPress = "Plenum Press" }
 @String{PrenticeHall = "Prentice-Hall" }
 @String{SIAMPub = "{SIAM} Publications" }
 @String{Springer = "Springer-Verlag" }
 @String{TexasPress = "University of Texas Press" }
 @String{VanNostrand = "Van Nostrand" }
 @String{WHFreeman = "W. H. Freeman and Co." }

%Entries

% Andy file name
% 1980-six-wood-rectangle-intersection-problem.pdf
@article{SW1980,
  author =       "Six, H.-W. and Wood, D.",
  year =         "1980",
  title =        "The rectangle intersection problem revisited",
  journal =      "BIT Numerical Mathematics",
  eid =          "4",
  volume =       "20",
  number =       "4",
  pages = {426-433},
  doi =          "10.1145/1057270.1057278",
  url =          "http://doi.acm.org/10.1145/1057270.1057278",
  url = {https://doi.org/10.1007/BF01933636},
  doi = {10.1007/BF01933636},
  abstract = {We take another look at the problem of intersecting rectangles with parallel sides. For this we derive a one-pass, time optimal algorithm which is easy to program, generalizes tod dimensions well, and illustrates a basic duality in its data structures and approach.},
}

% Andy file name
% 1983-edelsbrunner-a-new-approach-to-rectangle-intersections-part-I.pdf
@article{Edel1983a,
author = {Herbert Edelsbrunner},
title = {A new approach to rectangle intersections part I},
journal = {International Journal of Computer Mathematics},
volume = {13},
number = {3-4},
pages = {209-219},
year = {1983},
publisher = {Taylor & Francis},
doi = {10.1080/00207168308803364},
URL = {https://doi.org/10.1080/00207168308803364},
eprint = {https://doi.org/10.1080/00207168308803364}
}

% Andy file name
% 1983-edelsbrunner-a-new-approach-to-rectangle-intersections-part-II.pdf
@article{Edel1983b,
author = {Herbert Edelsbrunner},
title = {A new approach to rectangle intersections part II},
journal = {International Journal of Computer Mathematics},
volume = {13},
number = {3-4},
pages = {221-229},
year = {1983},
publisher = {Taylor & Francis},
doi = {10.1080/00207168308803365},
URL = {https://doi.org/10.1080/00207168308803365},
eprint = {https://doi.org/10.1080/00207168308803365}
}

% Andy file name
% no file name -- I bought a used hardback copy of this book
@Book{PS1985,
  author =       "Franco P. Preparata and Michael Ian Shamos",
  title =        "Computational Geometry",
  publisher =    "Springer",
  year =         "1985",
  address =      "New York, NY",
  editor =       "",
  volume =       "",
  number =       "",
  series =       "Monographs in Computer Science",
  month =        "",
  note =         "",
  url = {https://link.springer.com/book/10.1007/978-1-4612-1098-6},
}

% Andy file name
% 1987-guting-schilling-a-practical-divide-and-conquer-algorithm-for-the-rectangle-intersection-problem.pdf
@article{GS1987,
author = {G\"{u}ting, Ralf Harmut and Schilling, Werner},
title = {A Practical Divide-and-Conquer Algorithm for the Rectangle Intersection Problem},
year = {1987},
issue_date = {July 1987},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {42},
number = {2},
issn = {0020-0255},
url = {https://doi.org/10.1016/0020-0255(87)90018-1},
doi = {10.1016/0020-0255(87)90018-1},
journal = {Inf. Sci.},
month = {jul},
pages = {95–112},
numpages = {18}
}

% Andy file name
% 1994-matousek-geometric-range-searching.pdf
@article{Mato1994,
author = {Matou\v{s}ek, Ji\v{r}\'{\i}},
title = {Geometric Range Searching},
year = {1994},
issue_date = {Dec. 1994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {26},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/197405.197408},
doi = {10.1145/197405.197408},
abstract = {In geometric range searching, algorithmic problems of the following type are considered. Given an n-point set P in the plane, build a data structure so that, given a query triangle R, the number of points of P lying in R can be determined quickly. Similar questions can be asked for point sets in higher dimensions, with triangles replaced by simplices or by more complicated shapes. Algorithms of this type are of crucial importance in computational geometry, as they can be used as subroutines in solutions to many seemingly unrelated problems, which are often motivated by practical applications, for instance in computer graphics (ray tracing, hidden-surface removal etc.). We present a survey of theoretical results and the main techniques in geometric range  searching.},
journal = {ACM Comput. Surv.},
month = {dec},
pages = {422–461},
numpages = {40},
keywords = {lower bounds in arithmetic model, computational geometry, range searching, partition tree}
}

% Andy file name
% 1996-overmars-stappen-range-searching-and-point-location-among-fat-objects.pdf
@article{OS1996,
title = {Range Searching and Point Location among Fat Objects},
journal = {Journal of Algorithms},
volume = {21},
number = {3},
pages = {629-656},
year = {1996},
issn = {0196-6774},
doi = {https://doi.org/10.1006/jagm.1996.0063},
url = {https://www.sciencedirect.com/science/article/pii/S0196677496900632},
author = {Mark H. Overmars and Frank A. {van der Stappen}},
abstract = {We present a data structure that can store a set of disjoint fat objects ind-space such that point location and bounded-size range searching with arbitrarily shaped ranges can be performed efficiently. The structure can deal with either arbitrary (fat) convex objects or nonconvex (fat) polytopes. The multipurpose data structure supports point location and range searching queries in timeO(logd−1n) and requiresO(nlogd−1n) storage, afterO(nlogd−1nloglogn) preprocessing. The data structure and query algorithm are rather simple.}
}

% Andy file name
% 2010-devai-neumann-a-rectangle-intersection-algorithm-with-limited-resource-requirements.pdf
@INPROCEEDINGS{DN2010,
  author={Dévai, Frank and Neumann, László},
  booktitle={2010 10th IEEE International Conference on Computer and Information Technology},
  title={A Rectangle-Intersection Algorithm with Limited Resource Requirements},
  year={2010},
  volume={},
  number={},
  pages={2335-2340},
  doi={10.1109/CIT.2010.402},
  url={https://ieeexplore.ieee.org/document/5578313}
}

% Andy file name
% 1998-srinivasan-et-al-fast-and-scalable-layer-four-switching.pdf
@inproceedings{SVSW1998,
author = {Srinivasan, Venkatachary and Varghese, George and Suri, Subhash and Waldvogel, Marcel},
title = {Fast and Scalable Layer Four Switching},
year = {1998},
isbn = {1581130031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/285237.285282},
doi = {10.1145/285237.285282},
abstract = {In Layer Four switching, the route and resources allocated to a packet are determined by the destination address as well as other header fields of the packet such as source address, TCP and UDP port numbers. Layer Four switching unifies firewall processing, RSVP style resource reservation filters, QoS Routing, and normal unicast and multicast forwarding into a single framework. In this framework, the forwarding database of a router consists of a potentially large number of filters on key header fields. A given packet header can match multiple filters, so each filter is given a cost, and the packet is forwarded using the least cost matching filter.In this paper, we describe two new algorithms for solving the least cost matching filter problem at high speeds. Our first algorithm is based on a grid-of-tries construction and works optimally for processing filters consisting of two prefix fields (such as destination-source filters) using linear space. Our second algorithm, cross-producting, provides fast lookup times for arbitrary filters but potentially requires large storage. We describe a combination scheme that combines the advantages of both schemes. The combination scheme can be optimized to handle pure destination prefix filters in 4 memory accesses, destination-source filters in 8 memory accesses worst case, and all other filters in 11 memory accesses in the typical case.},
booktitle = {Proceedings of the ACM SIGCOMM '98 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {191–202},
numpages = {12},
location = {Vancouver, British Columbia, Canada},
series = {SIGCOMM '98}
}

% Andy file name
% 1999-srinivasan-suri-varghese-tuple-space-search.pdf
@article{SSV1999,
author = {Srinivasan, Venkatachary and Suri, Subhash and Varghese, George},
title = {Packet Classification Using Tuple Space Search},
year = {1999},
issue_date = {Oct. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/316194.316216},
doi = {10.1145/316194.316216},
abstract = {Routers must perform packet classification at high speeds to efficiently implement functions such as firewalls and QoS routing. Packet classification requires matching each packet against a database of filters (or rules), and forwarding the packet according to the highest priority filter. Existing filter schemes with fast lookup time do not scale to large filter databases. Other more scalable schemes work for 2-dimensional filters, but their lookup times degrade quickly with each additional dimension. While there exist good hardware solutions, our new schemes are geared towards software implementation.We introduce a generic packet classification algorithm, called Tuple Space Search (TSS). Because real databases typically use only a small number of distinct field lengths, by mapping filters to tuples even a simple linear search of the tuple space can provide significant speedup over naive linear search over the filters. Each tuple is maintained as a hash table that can be searched in one memory access. We then introduce techniques for further refining the search of the tuple space, and demonstrate their effectiveness on some firewall databases. For example, a real database of 278 filters had a tuple space of 41 which our algorithm prunes to 11 tuples. Even as we increased the filter database size from 1K to 100K (using a random two-dimensional filter generation model), the number of tuples grew from 53 to only 186, and the pruned tuples only grew from 1 to 4. Our Pruned Tuple Space search is also the only scheme known to us that allows fast updates and fast search times. We also show a lower bound on the general tuple space search problem, and describe an optimal algorithm, called Rectangle Search, for two-dimensional filters.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {aug},
pages = {135–146},
numpages = {12}
}

% Andy file name:
% 1999-gupta-mckeown-packet-classification-on-multiple-fields.pdf
@inproceedings{GM1999a,
author = {Gupta, Pankaj and McKeown, Nick},
title = {Packet Classification on Multiple Fields},
year = {1999},
isbn = {1581131356},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/316188.316217},
doi = {10.1145/316188.316217},
abstract = {Routers classify packets to determine which flow they belong to, and to decide what service they should receive. Classification may, in general, be based on an arbitrary number of fields in the packet header. Performing classification quickly on an arbitrary number of fields is known to be difficult, and has poor worst-case performance. In this paper, we consider a number of classifiers taken from real networks. We find that the classifiers contain considerable structure and redundancy that can be exploited by the classification algorithm. In particular, we find that a simple multi-stage classification algorithm, called RFC (recursive flow classification), can classify 30 million packets per second in pipelined hardware, or one million packets per second in software.},
booktitle = {Proceedings of the Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {147–160},
numpages = {14},
location = {Cambridge, Massachusetts, USA},
series = {SIGCOMM '99}
}

% Andy file name
% 2000-hari-et-al-resolving-packet-filter-conflicts.pdf
% tech report version ASP1999
@inproceedings{ASP2000,
author = {Adiseshu, Hari and Suri, Subhash and Parulkar, Guru},
booktitle={Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064)},
year = {2000},
month = {04},
pages = {1203 - 1212},
volume={3},
title = {Detecting and resolving packet filter conflicts},
isbn = {0-7803-5880-5},
doi = {10.1109/INFCOM.2000.832496},
url = {https://www.researchgate.net/publication/3842432_Detecting_and_resolving_packet_filter_conflicts}
}

% see also conference version ASP2000
% Andy file name
% 1999-hari-et-al-resolving-packet-filter-conflicts-tech-report.pdf
@article{ASP1999,
author = {Adiseshu, Hari and Suri, Subhash and Parulkar, Guru},
year = {1999},
month = {01},
pages = {},
title = {Packet Filter Management for Layer 4 Switching},
url = {https://www.researchgate.net/publication/2447037_Packet_Filter_Management_for_Layer_4_Switching}
}

% another url for PDF of paper
%url={https://cseweb.ucsd.edu/~varghese/PAPERS/infocompriyank.pdf}
% Andy file name
% 2001-warkhede-et-al-2d-conflict-free.pdf
@INPROCEEDINGS{WSV2001,
  author={Warkhede, Priyank and Suri, Subhash and Varghese, George},
  booktitle={Proceedings IEEE INFOCOM 2001. Conference on Computer Communications. Twentieth Annual Joint Conference of the IEEE Computer and Communications Society (Cat. No.01CH37213)},
  title={Fast packet classification for two-dimensional conflict-free filters},
  year={2001},
  volume={3},
  number={},
  pages={1434-1443},
  doi={10.1109/INFCOM.2001.916639},
  url={https://ieeexplore.ieee.org/document/916639}
}

% Andy file name
% 2003-li-et-al-scalable-packet-classification-using-abv-and-folding.pdf
@Techreport{LLS2003,
  author =       "Ji Li and Haiyang Liu and Karen Sollins",
  year =         "2003",
  title =        "Scalable Packet Classification Using Bit Vector Aggregating and Folding",
  institution =  "Massachusetts Institute of Technology",
  type =         "MIT Research Lab Technical Report",
  number =       "MIT-LCS-TM-637",
  address =      "Cambridge, MA",
  month =        "April",
  note =         "",
  url={http://publications.csail.mit.edu/lcs/pubs/pdf/MIT-LCS-TM-637.pdf}
}

% Andy file name
% todo
@article{LLS2002,
author = {Li, Ji and Liu, Haiyang and Sollins, Karen},
title = {AFBV: A Scalable Packet Classification Algorithm},
year = {2002},
issue_date = {July 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {3},
issn = {0146-4833},
url = {https://doi.org/10.1145/571697.571713},
doi = {10.1145/571697.571713},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {jul},
pages = {24},
numpages = {1}
}

% Andy file name
% 2003-singh-et-al-hypercuts.pdf
@inproceedings{SBVW2003,
author = {Singh, Sumeet and Baboescu, Florin and Varghese, George and Wang, Jia},
title = {Packet Classification Using Multidimensional Cutting},
year = {2003},
isbn = {1581137354},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/863955.863980},
doi = {10.1145/863955.863980},
abstract = {This paper introduces a classification algorithm called phHyperCuts. Like the previously best known algorithm, HiCuts, HyperCuts is based on a decision tree structure. Unlike HiCuts, however, in which each node in the decision tree represents a hyperplane, each node in the HyperCuts decision tree represents a k--dimensional hypercube. Using this extra degree of freedom and a new set of heuristics to find optimal hypercubes for a given amount of storage, HyperCuts can provide an order of magnitude improvement over existing classification algorithms. HyperCuts uses 2 to 10 times less memory than HiCuts optimized for memory, while the worst case search time of HyperCuts is 50--500\% better than that of HiCuts optimized for speed. Compared with another recent scheme, EGT-PC, HyperCuts uses 1.8--7 times less memory space while the worst case search time is up to 5 times smaller. More importantly, unlike EGT-PC, HyperCuts can be fully pipelined to provide one classification result every packet arrival time, and also allows fast updates.},
booktitle = {Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
pages = {213–224},
numpages = {12},
keywords = {firewalls, QoS, packet classification},
location = {Karlsruhe, Germany},
series = {SIGCOMM '03}
}

% tech report version: Tayl2004
% Andy file name
% todo
@article{Tayl2005,
author = {Taylor, David E.},
title = {Survey and Taxonomy of Packet Classification Techniques},
year = {2005},
issue_date = {September 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/1108956.1108958},
doi = {10.1145/1108956.1108958},
abstract = {Packet classification is an enabling function for a variety of Internet applications including quality of service, security, monitoring, and multimedia communications. In order to classify a packet as belonging to a particular flow or set of flows, network nodes must perform a search over a set of filters using multiple fields of the packet as the search key. In general, there have been two major threads of research addressing packet classification, algorithmic and architectural. A few pioneering groups of researchers posed the problem, provided complexity bounds, and offered a collection of algorithmic solutions. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements on existing algorithms. Given the inability of early algorithms to meet performance constraints imposed by high speed links, researchers in industry and academia devised architectural solutions to the problem. This thread of research produced the most widely-used packet classification device technology, Ternary Content Addressable Memory (TCAM). New architectural research combines intelligent algorithms and novel architectures to eliminate many of the unfavorable characteristics of current TCAMs. We observe that the community appears to be converging on a combined algorithmic and architectural approach to the problem. Using a taxonomy based on the high-level approach to the problem and a minimal set of running examples, we provide a survey of the seminal and recent solutions to the problem. It is our hope to foster a deeper understanding of the various packet classification techniques while providing a useful framework for discerning relationships and distinctions.},
journal = {ACM Comput. Surv.},
month = {sep},
pages = {238–275},
numpages = {38},
keywords = {Packet classification, flow identification}
}

% journal version: Tayl2005
% Andy file name
% 2004-taylor-survey-and-taxonomy.pdf
@Techreport{Tayl2004,
  author =       "Taylor, David E.",
  year =         "2004",
  title = {Survey and Taxonomy of Packet Classification Techniques},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2004-24",
  address =      "St. Louis, MO",
  month =        "May",
  note =         "",
  url={https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1998&context=cse_research}
}

% Possibly a URL of a different version of the paper?
% https://www.arl.wustl.edu/~jon.turner/pubs/2005/infocom05classBench.pdf
% conference version: TT2005b
% tech report version: TT2004a
% Andy file name
% 2007-taylor-et-al-classbench-a-packet-classification-benchmark.pdf
@ARTICLE{TT2007,
  author={Taylor, David E. and Turner, Jonathan S.},
  journal={IEEE/ACM Transactions on Networking},
  title={ClassBench: A Packet Classification Benchmark},
  year={2007},
  volume={15},
  number={3},
  pages={499-511},
  doi={10.1109/TNET.2007.893156},
  url={https://www.arl.wustl.edu/~jon.turner/pubs/2007/ton-2007det.pdf}
}

% journal version: TT2007
% tech report version: TT2004a
% Andy file name
% 2005-taylor-et-al-classbench-conference-version.pdf
@INPROCEEDINGS{TT2005b,
  author={Taylor, David E. and Turner, Jonathan S.},
  booktitle={Proceedings IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies.},
  title={ClassBench: a packet classification benchmark},
  year={2005},
  volume={3},
  number={},
  pages={2068-2079 vol. 3},
  doi={10.1109/INFCOM.2005.1498483},
  url={https://doi.org/10.1109/INFCOM.2005.1498483}
}

% journal version: TT2007
% conference version: TT2005b
% Andy file name
% 2004-taylor-et-al-classbench-tech-report.pdf
@Techreport{TT2004a,
  author={Taylor, David E. and Turner, Jonathan S.},
  year =         "2004",
  title={ClassBench: A Packet Classification Benchmark},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2004-28",
  address =      "St. Louis, MO",
  month =        "May",
  note =         "",
  url={https://www.arl.wustl.edu/~jon.turner/pubs/2004/wucse-2004-28.pdf}
}

% Andy file name
% 2005-taylor-et-al-scalable-packet-classification-using-distributed-crossproducting-of-field-labels.pdf
% Alternate url:
% https://www.arl.wustl.edu/~jon.turner/pubs/2005/infocom05dcfl.pdf
@INPROCEEDINGS{TT2005,
  author={Taylor, David E. and Turner, Jonathan S.},
  booktitle={Proceedings IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies.},
  title={Scalable packet classification using distributed crossproducing of field labels},
  year={2005},
  volume={1},
  number={},
  pages={269-280 vol. 1},
  doi={10.1109/INFCOM.2005.1497898},
  url={https://ieeexplore.ieee.org/document/1497898}
}

% Andy file name
% 2004-taylor-turner-scalable-packet-classification-using-distributed-crossproducting-of-field-labels-tech-report.pdf
@Techreport{TT2004b,
  author={Taylor, David E. and Turner, Jonathan S.},
  year =         "2004",
  title={Scalable Packet Classification using Distributed Crossproducting of Field Labels},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2004-38",
  address =      "St. Louis, MO",
  month =        "May",
  note =         "",
  url={https://www.arl.wustl.edu/~jon.turner/pubs/2004/wucse-2004-38.pdf}
}

% Andy file name
% 1997-waldvogel-et-al-scalable-high-speed-ip-routing-lookups.pdf
@inproceedings{WVTP1997,
author = {Waldvogel, Marcel and Varghese, George and Turner, Jon and Plattner, Bernhard},
title = {Scalable High Speed IP Routing Lookups},
year = {1997},
isbn = {089791905X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/263105.263136},
doi = {10.1145/263105.263136},
abstract = {Internet address lookup is a challenging problem because of increasing routing table sizes, increased traffic, higher speed links, and the migration to 128 bit IPv6 addresses. IP routing lookup requires computing the best matching prefix, for which standard solutions like hashing were believed to be inapplicable. The best existing solution we know of, BSD radix tries, scales badly as IP moves to 128 bit addresses. Our paper describes a new algorithm for best matching prefix using binary search on hash tables organized by prefix lengths. Our scheme scales very well as address and routing table sizes increase: independent of the table size, it requires a worst case time of log2(address bits) hash lookups. Thus only 5 hash lookups are needed for IPv4 and 7 for IPv6. We also introduce Mutating Binary Search and other optimizations that, for a typical IPv4 backbone router with over 33,000 entries, considerably reduce the average number of hashes to less than 2, of which one hash can be simplified to an indexed array access. We expect similar average case behavior for IPv6.},
booktitle = {Proceedings of the ACM SIGCOMM '97 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {25–36},
numpages = {12},
location = {Cannes, France},
series = {SIGCOMM '97}
}

% Andy file name
% 1998-lakshman-stiliadis-multi-dim-range-matching.pdf
@inproceedings{LS1998,
author = {Lakshman, T. V. and Stiliadis, Dimitrios},
title = {High-Speed Policy-Based Packet Forwarding Using Efficient Multi-Dimensional Range Matching},
year = {1998},
isbn = {1581130031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/285237.285283},
doi = {10.1145/285237.285283},
abstract = {The ability to provide differentiated services to users with widely varying requirements is becoming increasingly important, and Internet Service Providers would like to provide these differentiated services using the same shared network infrastructure. The key mechanism, that enables differentiation in a connectionless network, is the packet classification function that parses the headers of the packets, and after determining their context, classifies them based on administrative policies or real-time reservation decisions. Packet classification, however, is a complex operation that can become the bottleneck in routers that try to support gigabit link capacities. Hence, many proposals for differentiated services only require classification at lower speed edge routers and also avoid classification based on multiple fields in the packet header even if it might be advantageous to service providers. In this paper, we present new packet classification schemes that, with a worst-case and traffic-independent performance metric, can classify packets, by checking amongst a few thousand filtering rules, at rates of a million packets per second using range matches on more than 4 packet header fields. For a special case of classification in two dimensions, we present an algorithm that can handle more than 128K rules at these speeds in a traffic independent manner. We emphasize worst-case performance over average case performance because providing differentiated services requires intelligent queueing and scheduling of packets that precludes any significant queueing before the differentiating step (i.e., before packet classification). The presented filtering or classification schemes can be used to classify packets for security policy enforcement, applying resource management decisions, flow identification for RSVP reservations, multicast look-ups, and for source-destination and policy based routing. The scalability and performance of the algorithms have been demonstrated by implementation and testing in a prototype system.},
booktitle = {Proceedings of the ACM SIGCOMM '98 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {203–214},
numpages = {12},
location = {Vancouver, British Columbia, Canada},
series = {SIGCOMM '98}
}

% Andy file name
% 2005-baboescu-varghese-scalable-packet-classification.pdf
% BV2001 is earlier conference version
@ARTICLE{BV2005,
  author={Baboescu, Florin and Varghese, George},
  journal={IEEE/ACM Transactions on Networking},
  title={Scalable packet classification},
  year={2005},
  volume={13},
  number={1},
  pages={2-14},
  doi={10.1109/TNET.2004.842232}
}

% Andy file name
% 2001-baboescu-varghese-scalable-packet-classification.pdf
% BV2005 is later journal version
@inproceedings{BV2001,
author = {Baboescu, Florin and Varghese, George},
title = {Scalable Packet Classification},
year = {2001},
isbn = {1581134118},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/383059.383075},
doi = {10.1145/383059.383075},
abstract = {Packet classification is important for applications such as firewalls, intrusion detection, and differentiated services. Existing algorithms for packet classification reported in the literature scale poorly in either time or space as filter databases grow in size. Hardware solutions such as TCAMs do not scale to large classifiers. However, even for large classifiers (say 100,000 rules), any packet is likely to match a few (say 10) rules. Our paper seeks to exploit this observation to produce a scalable packet classification scheme called Aggregated Bit Vector (ABV). Our paper takes the bit vector search algorithm (BV) described in [11] (which takes linear time) and adds two new ideas, recursive aggregation of bit maps and filter rearrangement, to create ABV (which can take logarithmic time for many databases). We show that ABV outperforms BV by an order of magnitude using simulations on both industrial firewall databases and synthetically generated databases.},
booktitle = {Proceedings of the 2001 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
pages = {199–210},
numpages = {12},
location = {San Diego, California, USA},
series = {SIGCOMM '01}
}

% Andy file name
% 2006-song-design-and-evaluation-of-packet-classification-systems.pdf
@Phdthesis{Song2006,
  author =       "Haoyu Song",
  year =         "2006",
  title =        "Design and Evaluation of Packet Classification Systems",
  school =       "Washington University in St. Louis",
  address =      "St. Louis, MO",
  note =         "WUSEAS-2006-53",
  type =         "",
  month =        "September",
  url = {https://www.arl.wustl.edu/~jon.turner/studentTheses/hSong-2006.pdf}
}

% alternate url:
% https://www.arl.wustl.edu/~jon.turner/pubs/2011/transComp-2011.pdf
% Andy file name
% 2011-song-et-al-towards-advocacy-free-evaluation-of-packet-classifiction-algorithms.pdf
@ARTICLE{ST2011,
  author={Song, Haoyu and Turner, Jonathan},
  journal={IEEE Transactions on Computers},
  title={Toward Advocacy-Free Evaluation of Packet Classification Algorithms},
  year={2011},
  volume={60},
  number={5},
  pages={723-733},
  doi={10.1109/TC.2010.252},
  url={https://doi.org/10.1109/TC.2010.252}
}

% Andy file name
% todo
@ARTICLE{CWZL2008,
  author={Che, Hao and Wang, Zhijun and Zheng, Kai and Liu, Bin},
  journal={IEEE Transactions on Computers},
  title={DRES: Dynamic Range Encoding Scheme for TCAM Coprocessors},
  year={2008},
  volume={57},
  number={7},
  pages={902-915},
  doi={10.1109/TC.2007.70838},
  url={https://doi.org/10.1109/TC.2007.70838}
}

% alternate url
% https://www.cs.bgu.ac.il/~hendlerd/papers/TCAM-paper.pdf
% Andy file name
% 2007-bremler-barr-et-al-space-efficient-tcam-based-classification-using-gray-coding.pdf
@INPROCEEDINGS{BH2007,
  author={Bremler-Barr, A. and Hendler, D.},
  booktitle={IEEE INFOCOM 2007 - 26th IEEE International Conference on Computer Communications},
  title={Space-Efficient TCAM-Based Classification Using Gray Coding},
  year={2007},
  volume={},
  number={},
  pages={1388-1396},
  doi={10.1109/INFCOM.2007.164},
  url={https://doi.org/10.1109/INFCOM.2007.164}
}

% Strangely, there appear to be at least two different DOI identifiers
% for this paper.  One other I have found is:
% https://doi.org/10.1145/1384529.1375513
% Andy file name
% todo
@inproceedings{BHHF2008,
author = {Bremler-Barr, Anat and Hay, David and Hendler, Danny and Farber, Boris},
title = {Layered Interval Codes for Tcam-Based Classification},
year = {2008},
isbn = {9781605580050},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1375457.1375513},
doi = {10.1145/1375457.1375513},
booktitle = {Proceedings of the 2008 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems},
pages = {445–446},
numpages = {2},
keywords = {TCAM, classification},
location = {Annapolis, MD, USA},
series = {SIGMETRICS '08}
}

% Andy file name
% 2013-kesselman-et-al-space-and-speed-tradeoffs-in-tcam-hierarchical-packet-classification.pdf
@article{KKNS2013,
title = {Space and speed tradeoffs in TCAM hierarchical packet classification},
journal = {Journal of Computer and System Sciences},
volume = {79},
number = {1},
pages = {111-121},
year = {2013},
issn = {0022-0000},
doi = {https://doi.org/10.1016/j.jcss.2012.06.001},
url = {https://www.sciencedirect.com/science/article/pii/S0022000012001237},
author = {Alexander Kesselman and Kirill Kogan and Sergey Nemzer and Michael Segal},
keywords = {TCAM hierarchical packet classification, Dynamic programming, Lookups and space tradeoff},
abstract = {Traffic classification in the Internet is a crucial mechanism necessary to support network services. Using Ternary Content-Addressable Memories (TCAMs) to perform high-speed packet classification has become the de facto standard in industry. TCAMs concurrently match the packet headers against the rules in a classification database providing high throughput unparalleled by software-based solutions. The complexity of packet classification policies has been growing rapidly as the number of Internet services continues to increase. Many complex classification policies are naturally represented in a hierarchical fashion, where different layers perform classification based on the administrative domain and the traffic QoS parameters. However, multiple levels of classification hierarchy incur high lookup latency while high TCAM memory requirements of flattened classification policies is a major issue since TCAMs have very limited capacity. In this paper we focus on the fundamental tradeoff between the TCAM space and the number of lookups in the TCAM classification policies. We consider two optimization problems of dual nature: the first problem is to minimize the number of TCAM entries subject to the constraint on the maximum number of levels in the policy hierarchy; the second problem is to minimize the number of levels in the policy hierarchy subject to the constraint on the maximum number of TCAM entries. We propose efficient algorithms for these problems, which do not require any hardware changes. To the best of our knowledge, this is the first work to study these problems. We also show experimental results that support our findings.}
}

% Andy file name
% todo
@INPROCEEDINGS{MSS2011,
  author={Mishra, Tania and Sahni, Sartaj and Seetharaman, Gunasekaran},
  booktitle={2011 IEEE Symposium on Computers and Communications (ISCC)},
  title={PC-DUOS: Fast TCAM lookup and update for packet classifiers},
  year={2011},
  volume={},
  number={},
  pages={265-270},
  doi={10.1109/ISCC.2011.5983851},
  url={https://doi.org/10.1109/ISCC.2011.5983851}
}

% Andy file name
% 2010-lee-et-al-packet-classification-with-hierarchical-cross-producting.pdf
@article{LCW2010,
  title={Packet Classification with Hierarchical Cross-Producting},
  author={Chun-Liang LEE and Chia-Tai CHAN and Pi-Chung WANG},
  journal={IEICE Transactions on Information and Systems},
  volume={E93.D},
  number={5},
  pages={1117-1126},
  year={2010},
  doi={10.1587/transinf.E93.D.1117},
  url={https://doi.org/10.1587/transinf.E93.D.1117}
}

% Andy file name
% 2005-lakshminarayanan-et-al-algorithms-for-advanced-packet-classification-with-ternary-cams.pdf
@article{LRV2005,
author = {Lakshminarayanan, Karthik and Rangarajan, Anand and Venkatachary, Srinivasan},
title = {Algorithms for Advanced Packet Classification with Ternary CAMs},
year = {2005},
issue_date = {October 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/1090191.1080115},
doi = {10.1145/1090191.1080115},
abstract = {Ternary content-addressable memories (TCAMs) have gained wide acceptance in the industry for storing and searching Access Control Lists (ACLs). In this paper, we propose algorithms for addressing two important problems that are encountered while using TCAMs: reducing range expansion and multi-match classification.Our first algorithm addresses the problem of expansion of rules with range fields to represent range rules in TCAMs, a single range rule is mapped to multiple TCAM entries, which reduces the utilization of TCAMs. We propose a new scheme called Database Independent Range PreEncoding (DIRPE) that, in comparison to earlier approaches, reduces the worst-case number of TCAM entries a single rule maps on to. DIRPE works without prior knowledge of the database, scales when a large number of ranges is present, and has good incremental update properties.Our second algorithm addresses the problem of finding multiple matches in a TCAM. When searched, TCAMs return the first matching entry; however, new applications require either the first few or all matching entries. We describe a novel algorithm, called Multi-match Using Discriminators (MUD), that finds multiple matches without storing any per-search state information in the TCAM, thus making it suitable for multi-threaded environments. MUD does not increase the number of TCAM entries needed, and hence scales to large databases.Our algorithms do not require any modifications to existing TCAMs and are hence relatively easy to deploy. We evaluate the algorithms using real-life and random databases.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {aug},
pages = {193–204},
numpages = {12},
keywords = {packet classification, multi-match, ternary CAMs, range}
}

% Andy file name
% todo
@inproceedings{Liu2002a,
author = {Liu, Huan},
title = {Efficient Mapping of Range Classifier into Ternary-CAM},
year = {2002},
isbn = {0769516505},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Packet classification is inherently a multi dimensional search problem which is either very computation intensive or memory intensive for software implementation. Thus, hardware based solution is necessary to keep up with gigabit line rate processing. In this paper, we consider using standard Ternary Content Addressable Memory (TCAM) as a hardware classification engine. Traditionally, this approach has been deemed inefficient because ranges have tobe broken into prefixes before stored in TCAM, resulting in large expansion. We propose a novel scheme where we can efficiently map ranges into TCAM. Our proposal has no expansion at all, or very little expansion for width constrained application. Our proposal enables high speed deterministic classification using low cost commodity hardware.},
booktitle = {Proceedings of the 10th Symposium on High Performance Interconnects HOT Interconnects},
pages = {95},
series = {HOTI '02},
url = {https://doi.org/10.1109/CONECT.2002.1039263}
}

% Andy file name
% todo
@article{VNS2019,
author = {Vegesna, S. M. Srinivasavarma and Nara, Ashok Chakravarthy and Sk, Noor Mahammad},
title = {A Novel Rule Mapping on TCAM for Power Efficient Packet Classification},
year = {2019},
issue_date = {September 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {5},
issn = {1084-4309},
url = {https://doi.org/10.1145/3328103},
doi = {10.1145/3328103},
abstract = {Packet Classification is the enabling function performed in commodity switches for providing various services such as access control, intrusion detection, load balancing, and so on. Ternary Content Addressable Memories (TCAMs) are the de facto standard for performing packet classification at high speeds. However, TCAMs are highly costlier both in terms of cost and power consumption, forcing the switch vendors towards placing lots of effort for power management. Hence, power-efficient solutions for TCAM-based packet classification are highly relevant even today. In this article, we propose a novel rule placement algorithm based on the unique field values’ presence within the rule databases. We evaluate the total search that is needed to be inspected with respect to the traditional placement approach and the proposed placement approach based on the information content within the fields. Simulation results showed an average reduction of 30.55\% in the search space by the proposed placement approach, thereby resulting in an average reduction of 18.85\% per search energy over TCAM. With typical TCAM clock speeds ranging between 200--400MHz, this reduction in the per-search energy maps to a huge reduction in the total energy consumed by the TCAM-based network switches. The proposed solution is plug-and-play type requiring only minimal pre-processing within the Network Processing Unit (NPU) of the switches and edge routers.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = {jun},
articleno = {48},
numpages = {23},
keywords = {rule database, power efficient switches and routers, Packet classification, Ternary content addressable memories}
}

% Andy file name
% todo
@ARTICLE{BHHH2018,
  author={Bremler-Barr, Anat and Harchol, Yotam and Hay, David and Hel-Or, Yacov},
  journal={IEEE/ACM Transactions on Networking},
  title={Encoding Short Ranges in TCAM Without Expansion: Efficient Algorithm and Applications},
  year={2018},
  volume={26},
  number={2},
  pages={835-850},
  doi={10.1109/TNET.2018.2797690},
  url={https://doi.org/10.1109/TNET.2018.2797690}
}

% Andy file name
% todo
@ARTICLE{WCHLT2004,
  author={Pi-Chung Wang and Chia-Tai Chan and Shuo-Cheng Hu and Chun-Liang Lee and Wei-Chun Tseng},
  journal={IEEE Transactions on Multimedia},
  title={High-speed packet classification for differentiated services in next-generation networks},
  year={2004},
  volume={6},
  number={6},
  pages={925-935},
  doi={10.1109/TMM.2004.837263},
  url={https://doi.org/10.1109/TMM.2004.837263}
}

% Andy file name
% todo
@INPROCEEDINGS{NSCM2015,
  author={Nagpal, Bharti and Singh, Nanhay and Chauhan, Naresh and Murari, Radhika},
  booktitle={2015 International Conference on Advances in Computer Engineering and Applications},
  title={A survey and taxonomy of various packet classification algorithms},
  year={2015},
  volume={},
  number={},
  pages={8-13},
  doi={10.1109/ICACEA.2015.7164675},
  url={https://doi.org/10.1109/ICACEA.2015.7164675}
}

% Andy file name
% 2007-wang-et-al-performance-improvement-of-two-dimensional-packet-classification-by-filter-rephrasing.pdf
@ARTICLE{WLCC2007,
  author={Wang, Pi-Chung and Lee, Chun-Liang and Chan, Chia-Tai and Chang, Hung-Yi},
  journal={IEEE/ACM Transactions on Networking},
  title={Performance Improvement of Two-Dimensional Packet Classification by Filter Rephrasing},
  year={2007},
  volume={15},
  number={4},
  pages={906-917},
  doi={10.1109/TNET.2007.893872},
  url={https://doi.org/10.1109/TNET.2007.893872}
}

% Andy file name
% todo
@ARTICLE{Liu2002b,
  author={Huan Liu},
  journal={IEEE Micro},
  title={Routing table compaction in ternary CAM},
  year={2002},
  volume={22},
  number={1},
  pages={58-64},
  doi={10.1109/40.988690},
  url={https://doi.org/10.1109/40.988690}
}

% Andy file name
% 2007-kumar-et-al-hexa-compact-data-structures-for-faster-packet-processing.pdf
@INPROCEEDINGS{KTCM2007b,
  author={Kumar, Sailesh and Turner, Jonathan S. and Crowley, Patrick and Mitzenmacher, Michael},
  booktitle={2007 IEEE International Conference on Network Protocols},
  title={HEXA: Compact Data Structures for Faster Packet Processing},
  year={2007},
  volume={},
  number={},
  pages={246-255},
  doi={10.1109/ICNP.2007.4375855},
  url={https://ieeexplore.ieee.org/document/4375855}
}

% Andy file name
% 2007-kumar-et-al-hexa-compact-data-structures-for-faster-packet-processing-tech-report.pdf
@Techreport{KTCM2007a,
  author={Kumar, Sailesh and Turner, Jonathan and Crowley, Patrick and Mitzenmacher, Michael},
  year =         "2007",
  title={HEXA: Compact Data Structures for Faster Packet Processing},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2007-26",
  address =      "St. Louis, MO",
  note =         "",
  url={https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1129&context=cse_research}
}

% Andy file name
% 2007-lu-sahni-O-log-w-multimensional-packet-classification.pdf
% another url
% https://www.researchgate.net/publication/229026523_O_log_W_Multidimensional_Packet_Classification
@article{LS2007,
author = {Lu, Haibin and Sahni, Sartaj},
title = {$O(log W)$ Multidimensional Packet Classification},
year = {2007},
issue_date = {April 2007},
publisher = {IEEE Press},
volume = {15},
number = {2},
issn = {1063-6692},
url = {https://doi.org/10.1109/TNET.2007.892845},
doi = {10.1109/TNET.2007.892845},
abstract = {We use a collection of hash tables to represent a multidimensional packet classification table. These hash tables are derived from a trie-representation of the multidimensional classifier. The height of this trie is O(W), where W is the sum of the maximum possible length, in bits, of each of the fields of a filter. The leaves at level i of the trie together with markers for some of the leaves at levels j such that j > i are stored in a hash table Hi. The placement of markers is such that a binary search of the Hi's successfully locates the highest-priority filter that matches any given packet. The number of hash tables equals the trie height, O(W). Hence, a packet may be classified by performing O(log W) hash-table lookups. So the expected lookup-complexity of our data structure for multidimensional packet classification is O(log W). Our proposed scheme affords a memory advantage over the O(log W) 1-D scheme of Waldvogel et al. For multidimensional packet classification, our proposed scheme provides both a time and memory advantage over the extended grid-of-tries scheme of Baboescu et al.},
journal = {IEEE/ACM Trans. Netw.},
month = {apr},
pages = {462–472},
numpages = {11},
keywords = {expected complexity, binary search on levels, multidimensional packet classification}
}

% Andy file name
% 2009-wang-scalable-packet-classification-with-controlled-cross-producting.pdf
@article{Wang2009,
title = {Scalable packet classification with controlled cross-producting},
journal = {Computer Networks},
volume = {53},
number = {6},
pages = {821-834},
year = {2009},
note = {Traffic Classification and Its Applications to Modern Networks},
issn = {1389-1286},
doi = {https://doi.org/10.1016/j.comnet.2008.11.017},
url = {https://www.sciencedirect.com/science/article/pii/S1389128608004015},
author = {Pi-Chung Wang},
keywords = {Traffic classification, Packet classification, Firewalls, QoS, Forwarding},
abstract = {Packet classification is central among traffic classification techniques that categorize packets with a traffic descriptor or with user-defined criteria. This categorization may make information accessible for quality of service or security handling on the network. To make packet classification both fast and scalable, we propose a new algorithm that combines cross-producting with linear search. The new algorithm, Controlled Cross-producting, could improve the scalability of cross-producting significantly with respect to storage, while maintaining the search latency. In addition, we introduce several refinements and procedures for incremental update. We evaluate the performance of our scheme with filter databases of varying sizes and characteristics. Specifically, we experimented with 12 different types of filter databases, whose sizes vary from 16K to 128K. The experimental results demonstrate the feasibility and scalability of our scheme. A comparison with the prominent existing schemes further indicates that the proposed scheme takes less time and space.}
}

% Andy file name
% 2009-qi-et-al-hypersplit.pdf
@INPROCEEDINGS{QXYXL2009,
  author={Qi, Yaxuan and Xu, Lianghong and Yang, Baohua and Xue, Yibo and Li, Jun},
  booktitle={IEEE INFOCOM 2009},
  title={Packet Classification Algorithms: From Theory to Practice},
  year={2009},
  volume={},
  number={},
  pages={648-656},
  doi={10.1109/INFCOM.2009.5061972},
  url={https://ieeexplore.ieee.org/document/5061972}
}

% Andy file name
% 2010-vamanan-et-all-efficuts.pdf
@inproceedings{VVV2010,
author = {Vamanan, Balajee and Voskuilen, Gwendolyn and Vijaykumar, T. N.},
title = {EffiCuts: Optimizing Packet Classification for Memory and Throughput},
year = {2010},
isbn = {9781450302012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1851182.1851208},
doi = {10.1145/1851182.1851208},
abstract = {Packet Classification is a key functionality provided by modern routers. Previous decision-tree algorithms, HiCuts and HyperCuts, cut the multi-dimensional rule space to separate a classifier's rules. Despite their optimizations, the algorithms incur considerable memory overhead due to two issues: (1) Many rules in a classifier overlap and the overlapping rules vary vastly in size, causing the algorithms' fine cuts for separating the small rules to replicate the large rules. (2) Because a classifier's rule-space density varies significantly, the algorithms' equi-sized cuts for separating the dense parts needlessly partition the sparse parts, resulting in many ineffectual nodes that hold only a few rules. We propose EffiCuts which employs four novel ideas: (1) Separable trees: To eliminate overlap among small and large rules, we separate all small and large rules. We define a subset of rules to be separable if all the rules are either small or large in each dimension. We build a distinct tree for each such subset where each dimension can be cut coarsely to separate the large rules, or finely to separate the small rules without incurring replication. (2) Selective tree merging: To reduce the multiple trees' extra accesses which degrade throughput, we selectively merge separable trees mixing rules that may be small or large in at most one dimension. (3) Equi-dense cuts: We employ unequal cuts which distribute a node's rules evenly among the children, avoiding ineffectual nodes at the cost of a small processing overhead in the tree traversal. (4) Node Co-location: To achieve fewer accesses per node than HiCuts and HyperCuts, we co-locate parts of a node and its children. Using ClassBench, we show that for similar throughput EffiCuts needs factors of 57 less memory than HyperCuts and of 4-8 less power than TCAM.},
booktitle = {Proceedings of the ACM SIGCOMM 2010 Conference},
pages = {207–218},
numpages = {12},
keywords = {rule replication, packet classification, decision-tree algorithm},
location = {New Delhi, India},
series = {SIGCOMM '10}
}

% Andy file name
% 2010-gong-et-al-an-enhanced-recursive-flow-classification-algorithm.pdf
@article{GWC2010,
author = {Gong, Xiang-Yang and Wang, Wen-Dong and Cheng, Shi-Duan},
title = {ERFC: An Enhanced Recursive Flow Classification Algorithm},
year = {2010},
volume = {25},
number = {5},
issn = {1860-4749},
url = {https://doi.org/10.1007/s11390-010-9380-7},
doi = {10.1007/s11390-010-9380-7},
abstract = {Packet classification on multi-fields is a fundamental mechanism in network equipments, and various classification solutions have been proposed. Because of inherent difficulties, many of these solutions scale poorly in either time or space as rule sets grow in size. Recursive Flow Classification (RFC) is an algorithm with a very high classifying speed. However, its preprocessing complexity and memory requirement are rather high. In this paper, we propose an enhanced RFC (ERFC) algorithm, in which a hash-based aggregated bit vector scheme is exploited to speed up its preprocessing procedure. A compressed and cacheable data structure is also introduced to decrease total memory requirement and improve its searching performance. Evaluation results show that ERFC provides a great improvement over RFC in both space requirement and preprocessing time. The search time complexity of ERFC is equivalent to that of RFC in the worst case; and its average classifying speed is improved by about 100\%.},
journal = {Journal of Computer Science and Technology},
pages = {958–969}
}

% Andy file name
% 2013-li-et-al-hybridcuts.pdf
@INPROCEEDINGS{LL2013,
  author={Li, Wenjun and Li, Xianfeng},
  booktitle={2013 IEEE 21st Annual Symposium on High-Performance Interconnects},
  title={HybridCuts: A Scheme Combining Decomposition and Cutting for Packet Classification},
  year={2013},
  volume={},
  number={},
  pages={41-48},
  doi={10.1109/HOTI.2013.12},
  url={https://doi.org/10.1109/HOTI.2013.12}
}

% Andy file name
% 2014-lim-et-al-boundary-cutting.pdf
@ARTICLE{LLJL+2014,
  author={Lim, Hyesook and Lee, Nara and Jin, Geumdan and Lee, Jungwon and Choi, Youngju and Yim, Changhoon},
  journal={IEEE/ACM Transactions on Networking},
  title={Boundary Cutting for Packet Classification},
  year={2014},
  volume={22},
  number={2},
  pages={443-456},
  doi={10.1109/TNET.2013.2254124},
  url={https://doi.org/10.1109/TNET.2013.2254124}
}

% Andy file name
% 2014-kogan-et-all-sax-pac.pdf
@inproceedings{KNRCE2014,
author = {Kogan, Kirill and Nikolenko, Sergey and Rottenstreich, Ori and Culhane, William and Eugster, Patrick},
title = {SAX-PAC (Scalable And EXpressive PAcket Classification)},
year = {2014},
isbn = {9781450328364},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2619239.2626294},
doi = {10.1145/2619239.2626294},
abstract = {Efficient packet classification is a core concern for network services. Traditional multi-field classification approaches, in both software and ternary content-addressable memory (TCAMs), entail tradeoffs between (memory) space and (lookup) time. TCAMs cannot efficiently represent range rules, a common class of classification rules confining values of packet fields to given ranges. The exponential space growth of TCAM entries relative to the number of fields is exacerbated when multiple fields contain ranges. In this work, we present a novel approach which identifies properties of many classifiers which can be implemented in linear space and with worst-case guaranteed logarithmic time emph{and} allows the addition of more fields including range constraints without impacting space and time complexities. On real-life classifiers from Cisco Systems and additional classifiers from ClassBench (with real parameters), 90-95\% of rules are thus handled, and the other 5-10\% of rules can be stored in TCAM to be processed in parallel.},
booktitle = {Proceedings of the 2014 ACM Conference on SIGCOMM},
pages = {15–26},
numpages = {12},
keywords = {TCAM, packet classification},
location = {Chicago, Illinois, USA},
series = {SIGCOMM '14}
}

% Andy file name
% 2014-yang-et-al-practical-multituple-packet-classification-using-dynamic-discrete-bit-selection.pdf
@ARTICLE{YFJXL2014,
  author={Yang, Baohua and Fong, Jeffrey and Jiang, Weirong and Xue, Yibo and Li, Jun},
  journal={IEEE Transactions on Computers},
  title={Practical Multituple Packet Classification Using Dynamic Discrete Bit Selection},
  year={2014},
  volume={63},
  number={2},
  pages={424-434},
  doi={10.1109/TC.2012.191},
  url={https://doi.org/10.1109/TC.2012.191}
}

% journal version MLJS+2022
% Andy file name
% 2017-matousek-et-al-classbench-ng.pdf
@inproceedings{MALMK2017,
author = {Matou\v{s}ek, Ji\v{r}\'{\i} and Antichi, Gianni and Lu\v{c}ansk\'{y}, Adam and Moore, Andrew W. and Ko\v{r}enek, Jan},
title = {ClassBench-Ng: Recasting ClassBench After a Decade of Network Evolution},
year = {2017},
isbn = {9781509063864},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ANCS.2017.33},
doi = {10.1109/ANCS.2017.33},
abstract = {Internet evolution is driven by a continuous stream of new applications and users driving the demand for services. To keep up with this, a never-stopping research has been transforming the Internet ecosystem over the time. Technological changes on both protocols (the uptake of IPv6) and network architectures (the adoption of Software Defined Networking) introduced new challenges for ASIC designers. In particular, IPv6 and OpenFlow increased the complexity of the rule matching problem, pushing researchers to build new packet classification algorithms capable to keep pace with a steady growth of link speed.A lot of research effort identifies better lookup techniques capitalizing on the characteristics of rule sets. So far, the availability of small numbers of real rule sets and synthetic ones, generated with tools such as ClassBench, has boosted research in the IPv4 world. Starting from an analysis of rule sets taken from operational environments, we present ClassBench-ng, a new open source tool for the generation of synthetic IPv4, IPv6, and OpenFlow 1.0 rule sets exposing the same properties of real ones. We feel this tool can meet the requirements of nowadays researchers, boosting the rule matching research as ClassBench has done since ten years ago.},
booktitle = {Proceedings of the Symposium on Architectures for Networking and Communications Systems},
pages = {204–216},
numpages = {13},
keywords = {OpenFlow, ClassBench, packet classification},
location = {Beijing, China},
series = {ANCS '17}
}

% conference version MALMK2017
% Andy file name
% todo
@ARTICLE{MLJS+2022,
  author={Matoušek, Jiří and Lučanský, Adam and Janeček, David and Sabo, Jozef and Kořenek, Jan and Antichi, Gianni},
  journal={IEEE/ACM Transactions on Networking},
  title={ClassBench-ng: Benchmarking Packet Classification Algorithms in the OpenFlow Era},
  year={2022},
  volume={30},
  number={5},
  pages={1912-1925},
  doi={10.1109/TNET.2022.3155708},
  url={https://doi.org/10.1109/TNET.2022.3155708}
}

% Andy file name
% 2017-liu-et-al-bitcuts.pdf
@article{LSZGL2017,
title = {BitCuts: A fast packet classification algorithm using bit-level cutting},
journal = {Computer Communications},
volume = {109},
pages = {38-52},
year = {2017},
issn = {0140-3664},
doi = {https://doi.org/10.1016/j.comcom.2017.05.001},
url = {https://www.sciencedirect.com/science/article/pii/S0140366416305989},
author = {Zhi Liu and Shijie Sun and Hang Zhu and Jiaqi Gao and Jun Li},
keywords = {Packet classification, High-performance, Decision-tree algorithm},
abstract = {Packet classification is one of the fundamental techniques required by various network management functionalities. As the state-of-the-art of software packet classification, decision-tree algorithms employ various geometrical cutting schemes to build optimized decision trees. However, existing cutting schemes cannot meet the desired performance on large rulesets because they sacrifice either classification speed or memory size by design. In this paper, we reveal the inefficiencies of current cutting schemes — equi-sized cutting and equi-dense cutting — and propose a new cutting scheme and its corresponding decision-tree algorithm, named “BitCuts”. BitCuts achieves only 42\%–59\% the memory accesses of HyperSplit, HyperCuts and EffiCuts, the typical decision-tree algorithms. In addition, BitCuts accelerates child-node indexing with bit-manipulation instructions, enabling fast tree traversal. A DPDK-based evaluation on the ACL10K ruleset shows that BitCuts achieves 2.0x – 2.2x the throughput of HyperSplit, HyperCuts and EffiCuts. Furthermore, BitCuts is the only algorithm that achieves 10 Gbps throughput with 3 cores. The memory consumption of BitCuts is only 12\% of HyperCuts, 19\% of EffiCuts, and is comparable to that of HyperSplit, which proves that BitCuts outperforms existing algorithms in achieving a good trade-off between speed and space.}
}

% Andy file name
% 2018-li-et-al-cutsplit.pdf
@INPROCEEDINGS{LLLX2018,
  author={Li, Wenjun and Li, Xianfeng and Li, Hui and Xie, Gaogang},
  booktitle={IEEE INFOCOM 2018 - IEEE Conference on Computer Communications},
  title={CutSplit: A Decision-Tree Combining Cutting and Splitting for Scalable Packet Classification},
  year={2018},
  volume={},
  number={},
  pages={2645-2653},
  doi={10.1109/INFOCOM.2018.8485947},
  url={https://doi.org/10.1109/INFOCOM.2018.8485947}
}

% Andy file name
% 2019-liang-et-al-neural-packet-classification.pdf
@inproceedings{LZJS2019,
author = {Liang, Eric and Zhu, Hang and Jin, Xin and Stoica, Ion},
title = {Neural Packet Classification},
year = {2019},
isbn = {9781450359566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341302.3342221},
doi = {10.1145/3341302.3342221},
abstract = {Packet classification is a fundamental problem in computer networking. This problem exposes a hard tradeoff between the computation and state complexity, which makes it particularly challenging. To navigate this tradeoff, existing solutions rely on complex hand-tuned heuristics, which are brittle and hard to optimize.In this paper, we propose a deep reinforcement learning (RL) approach to solve the packet classification problem. There are several characteristics that make this problem a good fit for Deep RL. First, many existing solutions iteratively build a decision tree by splitting nodes in the tree. Second, the effects of these actions (e.g., splitting nodes) can only be evaluated once the entire tree is built. These two characteristics are naturally captured by the ability of RL to take actions that have sparse and delayed rewards. Third, it is computationally efficient to generate data traces and evaluate decision trees, which alleviate the notoriously high sample complexity problem of Deep RL algorithms. Our solution, NeuroCuts, uses succinct representations to encode state and action space, and efficiently explore candidate decision trees to optimize for a global objective. It produces compact decision trees optimized for a specific set of rules and a given performance metric, such as classification time, memory footprint, or a combination of the two. Evaluation on Class-Bench shows that NeuroCuts outperforms existing hand-crafted algorithms in classification time by 18\% at the median, and reduces both classification time and memory footprint by up to 3X.},
booktitle = {Proceedings of the ACM Special Interest Group on Data Communication},
pages = {256–269},
numpages = {14},
keywords = {packet classification, reinforcement learning},
location = {Beijing, China},
series = {SIGCOMM '19}
}

% Andy file name
% 2019-daly-et-al-tuplemerge.pdf
% another url
% https://nonsns.github.io/paper/rossi19ton.pdf
@ARTICLE{DBLP+2019,
  author={Daly, James and Bruschi, Valerio and Linguaglossa, Leonardo and Pontarelli, Salvatore and Rossi, Dario and Tollet, Jerome and Torng, Eric and Yourtchenko, Andrew},
  journal={IEEE/ACM Transaction on Networking},
  title={TupleMerge: Fast Software Packet Processing for Online Packet Classification},
  year={2019},
  volume={27},
  number={4},
  pages={1417-1431},
  doi={10.1109/TNET.2019.2920718},
  url={https://doi.org/10.1109/TNET.2019.2920718}
}

% Andy file name
% 2020-abbasi-et-al-mbitcuts.pdf
@ARTICLE{AFR2020,
  author={Abbasi, Mahdi and Vesaghati Fazel, Saeideh and Rafiee, Milad},
  journal={The Journal of Supercomputing},
  title={MBitCuts: optimal bit-level cutting in geometric space packet classification},
  year={2020},
  volume={76},
  number={4},
  pages={3105-3128},
  abstract={Packet classification is one of the main tasks of modern network processors. A challenging problem in this regard is to use an algorithm that can classify packets at a high speed and with a reasonably low memory consumption. Traditional decision tree-based algorithms do not satisfy both requirements. BitCuts algorithm, which has been recently proposed to increase search speed in tree algorithms, is not an exception. We propose MBitCuts as a novel solution that reduces both memory usage and memory access in this algorithm by changing the method of bit selection in the cutting of the geometric subspace model of each tree node. The evaluation results show that the average number of memory accesses and the average memory usage in the proposed method have been reduced by 39\% and 87\%, respectively. Also, MBitCuts outperforms state-of-the-art tree-based algorithms by simultaneously achieving the best classification speed and the least memory consumption.},
  doi={10.1007/s11227-019-03090-3},
  url={https://doi.org/10.1007/s11227-019-03090-3}
}

% Andy file name
% 2021-xin-et-al-kicktree.pdf
@inproceedings{XLLY+2021,
author = {Xin, Yao and Liu, Yuxi and Li, Wenjun and Yao, Ruyi and Xu, Yang and Wang, Yi},
title = {KickTree: A Recursive Algorithmic Scheme for Packet Classification with Bounded Worst-Case Performance},
year = {2022},
isbn = {9781450391689},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493425.3502752},
doi = {10.1145/3493425.3502752},
abstract = {As a promising alternative to TCAM-based solutions for packet classification, FPGA has received increasing attention. Although extensive research has been conducted in this area, existing FPGA-based packet classifiers cannot satisfy the burgeoning needs from OpenFlow, which demands large-scale rule sets and frequent rule updates. As a recently proposed hardware-specific approach, TabTree avoids rule replication and supports dynamic rule update. However, it still faces problems of unbalanced rule subset partition, unevenly distributed subtrees and excessive TSS leaf nodes when implemented on FPGA. In this paper, we propose a hardware-friendly packet classification approach called KickTree, which is elaborated by considering hardware properties. To take advantage of intrinsic parallelism of FPGA, KickTree adopts multiple balanced decision trees which can run simultaneously. The bit selection is more flexible which breaks the restriction of rule subset. Moreover, each subset size is strictly limited, leading to bounded and evenly-distributed},
booktitle = {Proceedings of the Symposium on Architectures for Networking and Communications Systems},
pages = {23–30},
numpages = {8},
keywords = {FPGA, packet classification, decision tree, SDN},
location = {Layfette, IN, USA},
series = {ANCS '21}
}

% alternate url
% https://conferences.sigcomm.org/events/apnet2022/papers/HybridTSS-%20A%20Recursive%20Scheme%20Combining%20Coarse-%20and%20Fine-%20Grained%20Tuples%20for%20Packet%20Classification.pdf
% Andy file name
% 2022-liu-et-al-hybridtss.pdf
@inproceedings{LXLS+2023,
author = {Liu, Yuxi and Xin, Yao and Li, Wenjun and Song, Haoyu and Rottenstreich, Ori and Xie, Gaogang and Li, Weichao and Wang, Yi},
title = {HybridTSS: A Recursive Scheme Combining Coarse- and Fine- Grained Tuples for Packet Classification},
year = {2023},
isbn = {9781450397483},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3542637.3542644},
doi = {10.1145/3542637.3542644},
abstract = {The popular OpenFlow virtual switch Open vSwitch (OVS) uses a variant of Tuple Space Search (TSS) for packet classification. Although it is easy for rule updates, the lookup performance is poor. By introducing partial trees into TSS, the recently proposed CutTSS improves the lookup performance of TSS. However, it is challenging to replace TSS in OVS for two reasons: (1) the hand-tuned partitioning heuristics are rule-set dependent; (2) the complex and irregular data structures make it difficult to be integrated and maintained in real systems. To address these issues, we propose HybridTSS, a recursive TSS scheme for fast packet classification in OVS, which exploits three novel ideas: (1) the recursive partitioning based on reinforcement learning balances global rule partitions with low training complexity; (2) a hybrid TSS scheme combining coarse-grained and fine-grained tuples suppresses tuple explosion in TSS; (3) a heterogeneous search algorithm consisting of TSS and linear search adapts to characteristics of rules at different scales for fast lookups. Using ClassBench, we show that, while immune from the main drawbacks of CutTSS, HybridTSS retains the update performance of TSS, and achieves almost an order of magnitude higher lookup performance than TSS, making it an ideal packet classification algorithm for OVS.},
booktitle = {Proceedings of the 6th Asia-Pacific Workshop on Networking},
pages = {43–49},
numpages = {7},
keywords = {machine learning, packet classification, Open vSwitch, SDN},
location = {<conf-loc>, <city>Fuzhou</city>, <country>China</country>, </conf-loc>},
series = {APNet '22}
}

% Andy file name
% 2023-cheng-et-al-pcmsu.pdf
@ARTICLE{CXS2023,
  author={Cheng, Yuzhu and Xu, Yihang and Shi, Qiuying},
  journal={IEEE Access},
  title={PcmSU-A Packet Classification Method Supporting High-Speed Search and Fast Update},
  year={2023},
  volume={11},
  number={},
  pages={58765-58778},
  doi={10.1109/ACCESS.2023.3281838},
  url={https://ieeexplore.ieee.org/document/10141601}
}

% Andy file name
% 2020-rashelbach-et-al-a-computational-approach-to-packet-classification.pdf
@inproceedings{RRS2020,
author = {Rashelbach, Alon and Rottenstreich, Ori and Silberstein, Mark},
title = {A Computational Approach to Packet Classification},
year = {2020},
isbn = {9781450379557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387514.3405886},
doi = {10.1145/3387514.3405886},
abstract = {Multi-field packet classification is a crucial component in modern software-defined data center networks. To achieve high throughput and low latency, state-of-the-art algorithms strive to fit the rule lookup data structures into on-die caches; however, they do not scale well with the number of rules.We present a novel approach, NuevoMatch, which improves the memory scaling of existing methods. A new data structure, Range Query Recursive Model Index (RQ-RMI), is the key component that enables NuevoMatch to replace most of the accesses to main memory with model inference computations. We describe an efficient training algorithm that guarantees the correctness of the RQ-RMI-based classification. The use of RQ-RMI allows the rules to be compressed into model weights that fit into the hardware cache. Further, it takes advantage of the growing support for fast neural network processing in modern CPUs, such as wide vector instructions, achieving a rate of tens of nanoseconds per lookup.Our evaluation using 500K multi-field rules from the standard ClassBench benchmark shows a geometric mean compression factor of 4.9x, 8x, and 82x, and average performance improvement of 2.4x, 2.6x, and 1.6x in throughput compared to CutSplit, NeuroCuts, and TupleMerge, all state-of-the-art algorithms1.},
booktitle = {Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {542–556},
numpages = {15},
keywords = {Packet Classification, Virtual Switches, Neural Networks},
location = {Virtual Event, USA},
series = {SIGCOMM '20}
}

% Andy file name
% 2023-lin-et-al-packet-classification-using-tcam-of-narrow-entries.pdf
% Another URL;
% https://doi.org/10.3390/technologies11050147
@Article{LPW2023,
AUTHOR = {Lin, Hsin-Tsung and Pan, Wei-Han and Wang, Pi-Chung},
TITLE = {Packet Classification Using TCAM of Narrow Entries},
JOURNAL = {Technologies},
VOLUME = {11},
YEAR = {2023},
NUMBER = {5},
ARTICLE-NUMBER = {147},
URL = {https://www.mdpi.com/2227-7080/11/5/147},
ISSN = {2227-7080},
ABSTRACT = {Packet classification based on rules of packet header fields is the key technology for enabling software-defined networking (SDN). Ternary content addressable memory (TCAM) is a widely used hardware for packet classification; however, commercially available TCAM chips have only limited storage. As the number of supported header fields in SDN increases, the number of supported rules in a TCAM chip is reduced. In this work, we present a novel scheme to enable packet classification using TCAM with entries that are narrower than rules by storing the most representative field of a ruleset in TCAM. Due to the fact that not all rules can be distinguished using one field, our scheme employs a TCAM-based multimatch packet classification technique to ensure correctness. We further develop approaches to reduce redundant TCAM accesses for multimatch packet classification. Although our scheme requires additional TCAM accesses, it supports packet classification upon long rules with narrow TCAM entries, and drastically reduces the required TCAM storage. Our experimental results show that our scheme requires a moderate number of additional TCAM accesses and consumes much less storage compared to the basic TCAM-based packet classification. Thus, it can provide the required scalability for long rules required by potential applications of SDN.},
DOI = {10.3390/technologies11050147}
}

% Andy file name
% 2003-baboescu-et-al-Packet_classification_for_core_routers_is_there_an_alternative_to_CAMs.pdf
@inproceedings{BSV2003,
author = {Baboescu, Florin and Singh, Sumeet and Varghese, George},
year = {2003},
month = {03},
pages = {53 - 63 vol.1},
title = {Packet classification for core routers: Is there an alternative to CAMs?},
volume = {1},
isbn = {0-7803-7752-4},
journal = {Proceedings - IEEE INFOCOM},
doi = {10.1109/INFCOM.2003.1208658},
url = {https://www.researchgate.net/publication/4020951_Packet_classification_for_core_routers_Is_there_an_alternative_to_CAMs}
}

% Andy file name
% 2000-woo-A_modular_approach_to_packet_classification_algorithms_and_results.pdf
@INPROCEEDINGS{Woo2000,
  author={Woo, T.Y.C.},
  booktitle={Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064)},
  title={A modular approach to packet classification: algorithms and results},
  year={2000},
  volume={3},
  number={},
  pages={1213-1222 vol.3},
  doi={10.1109/INFCOM.2000.832499},
  url={https://ieeexplore.ieee.org/document/832499}
}

% Andy file name
% 2003-lunteren-Fast_and_scalable_packet_classification.pdf
@ARTICLE{LE2003,
  author={van Lunteren, J. and Engbersen, T.},
  journal={IEEE Journal on Selected Areas in Communications},
  title={Fast and scalable packet classification},
  year={2003},
  volume={21},
  number={4},
  pages={560-571},
  doi={10.1109/JSAC.2003.810527}
}

% Andy file name
% 2004-kounavis-et-al-directions-in-packet-classification-for-network-processors.pdf
@incollection{KKVYC2004,
title = {Chapter 13 - Directions in Packet Classification for Network Processors},
editor = {Patrick Crowley and Mark A. Franklin and Haldun Hadimioglu and Peter Z. Onufryk},
booktitle = {Network Processor Design},
publisher = {Morgan Kaufmann},
address = {San Francisco},
pages = {273-298},
year = {2004},
volume = {2},
series = {The Morgan Kaufmann Series in Computer Architecture and Design},
issn = {15459888},
doi = {https://doi.org/10.1016/B978-012198157-0/50015-5},
url = {https://www.sciencedirect.com/science/article/pii/B9780121981570500155},
author = {Michael E. Kounavis and Alok Kumar and Harrick Vin and Raj Yavatkar and Andrew T. Campbell},
abstract = {Publisher Summary
Network processors are generally configured with only a small amount of memory with limited access bandwidth. A key challenge is to design packet classification algorithms that can be implemented efficiently on network processor platforms. The design of such algorithms needs to exploit the structure and characteristics of packet classification rules. This chapter analyzes several databases of classification rules found in firewalls and derived their statistical properties. The rules found in access control lists (ACL) contain two types of fields, and these rules refer to many more network paths than applications. IP address pairs identify regions that overlap with one another. Only a small number of transport-level fields are sufficient to characterize ACLs of different sizes. Based on the findings, a hybrid, two-stage classification architecture is suggested.}
}

% alternate with maybe same PDF:
% https://www.bell-labs.com/usr/milind.buddhikot/www/psdocs/icnp2001-l4.pdf
% Andy file name
% 2001-sahasranaman-et-al-comparative-evaluation-of-software-implementations-of-layer-4-packet-classification-schemes.pdf
@INPROCEEDINGS{VB2001,
  author={Sahasranaman, Vivek and Buddhikot, Mlind M.},
  booktitle={Proceedings Ninth International Conference on Network Protocols. ICNP 2001},
  title={Comparative evaluation of software implementations of layer-4 packet classification schemes},
  year={2001},
  volume={},
  number={},
  pages={220-228},
  doi={10.1109/ICNP.2001.992902},
  url={https://ieeexplore.ieee.org/document/992902}
}

% GM2000 is later published version
% another url
% https://www.semanticscholar.org/paper/Packet-Classification-using-Hierarchical-Cuttings-Gupta/d3266e5e01f5711a3d3182ff2ce5661710aa7fda
% Andy file name:
% 1999-gupta-mckeown-packet-classification-using-hierarchical-intelligent-cuttings.pdf
@inproceedings{GM1999b,
  title={Packet Classification using Hierarchical Intelligent Cuttings},
  booktitle={Hot Interconnects VII},
  author={Pankaj Gupta and Nick McKeown},
  year={1999},
  url={https://api.semanticscholar.org/CorpusID:6883139}
}

% GM1999b is earlier conference version
% Andy file name
% 2000-gupta-et-al-Classifying_packets_with_hierarchical_intelligent_cuttings.pdf
@ARTICLE{GM2000,
  author={Gupta, Pankaj and McKeown, Nick},
  journal={IEEE Micro},
  title={Classifying packets with hierarchical intelligent cuttings},
  year={2000},
  volume={20},
  number={1},
  pages={34-41},
  doi={10.1109/40.820051},
  url={https://ieeexplore.ieee.org/document/820051}
}

% Andy file name
% 2003-spitznagel-et-al-Packet_classification_using_extended_TCAMs.pdf
@INPROCEEDINGS{STT2003,
  author={Spitznagel, Ed and Taylor, David E. and Turner, Jonathan S.},
  booktitle={11th IEEE International Conference on Network Protocols, 2003. Proceedings.},
  title={Packet classification using extended TCAMs},
  year={2003},
  volume={},
  number={},
  pages={120-131},
  doi={10.1109/ICNP.2003.1249762},
  url={https://doi.org/10.1109/ICNP.2003.1249762}
}

% Andy file name
% 2000-feldman-et-al-Tradeoffs_for_packet_classification.pdf
@INPROCEEDINGS{FM2000,
  author={Feldman, Anja and Muthukrishnan, S.},
  booktitle={Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064)},
  title={Tradeoffs for packet classification},
  year={2000},
  volume={3},
  number={},
  pages={1193-1202 vol.3},
  doi={10.1109/INFCOM.2000.832493},
  url={https://doi.org/10.1109/INFCOM.2000.832493}
}

% BV2003 is another version
% Andy file name
% 2002-baboescu-et-al-Fast_and_scalable_conflict_detection_for_packet_classifiers.pdf
@INPROCEEDINGS{BV2002,
  author={Baboescu, Florin and Varghese, George},
  booktitle={10th IEEE International Conference on Network Protocols, 2002. Proceedings.},
  title={Fast and scalable conflict detection for packet classifiers},
  year={2002},
  volume={},
  number={},
  pages={270-279},
  doi={10.1109/ICNP.2002.1181414},
  url={https://doi.org/10.1109/ICNP.2002.1181414}
}

% BV2002 is another version
% Andy file name
% todo
@article{BV2003,
title = {Fast and scalable conflict detection for packet classifiers},
journal = {Computer Networks},
volume = {42},
number = {6},
pages = {717-735},
year = {2003},
issn = {1389-1286},
doi = {https://doi.org/10.1016/S1389-1286(03)00213-5},
url = {https://www.sciencedirect.com/science/article/pii/S1389128603002135},
author = {Florin Baboescu and George Varghese},
keywords = {Packet classification, Filter conflicts, Classifiers, IP Lookups},
abstract = {Packet filters provide rules for classifying packets based on header fields. High speed packet classification has received much study. However, the twin problems of fast updates and fast conflict detection have not received much attention. A conflict occurs when two classifiers overlap, potentially creating ambiguity for packets that match both filters. For example, if Rule 1 specifies that all packets going to CNN be rate controlled and Rule 2 specifies that all packets coming from Walmart be given high priority, the rules conflict for traffic from Walmart to CNN. There has been prior work on efficient conflict detection for two-dimensional classifiers. However, the best known algorithm for conflict detection for general classifiers is the naive O(N2) algorithm of comparing each pair of rules for a conflict. In this paper, we describe an efficient and scalable conflict detection algorithm for the general case that is significantly faster. For example, for a database of 20000 rules, our algorithm is 40 times faster than the naive implementation. Even without considering conflicts, our algorithm also provides a packet classifier with fast updates and fast lookups that can be used for stateful packet filtering.}
}

% Andy file name
% todo
@article{CL2005,
author = {Cohen, Edith and Lund, Carsten},
title = {Packet Classification in Large ISPs: Design and Evaluation of Decision Tree Classifiers},
year = {2005},
issue_date = {June 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {1},
issn = {0163-5999},
url = {https://doi.org/10.1145/1071690.1064222},
doi = {10.1145/1071690.1064222},
abstract = {Packet classification, although extensively studied, is an evolving problem. Growing and changing needs necessitate the use of larger filters with more complex rules. The increased complexity and size pose implementation challenges on current hardware solutions and drive the development of software classifiers, in particular, decision-tree based classifiers. Important performance measures for these classifiers are time and memory due to required high throughput and use of limited fast memory.We analyze Tier 1 ISP data that includes filters and corresponding traffic from over a hundred edge routers and thousands of interfaces. We provide a comprehensive view on packet classification in an operational network and glean insights that help us design more effective classification algorithms.We propose and evaluate decision tree classifiers with common branches. These classifiers have linear worst-case memory bounds and require much less memory than standard decision tree classifiers, but nonetheless, we show that on our data have similar average and worst-case time performance. We argue that common-branches exploit structure that is present in real-life data sets.We observe a strong Zipf-like pattern in the usage of rules in a classifier, where a very small number of rules resolves the bulk of traffic and most rules are essentially never used. Inspired by this observation, we propose traffic-aware classifiers that obtain superior average-case and bounded worst-case performance. Good average-case can boost performance of software classifiers that can be used in small to medium sized routers and are also important for traffic analysis and traffic engineering.},
journal = {SIGMETRICS Perform. Eval. Rev.},
month = {jun},
pages = {73–84},
numpages = {12},
keywords = {decision trees, routing, packet filtering, access control lists}
}

@inproceedings{CL2005,
author = {Cohen, Edith and Lund, Carsten},
title = {Packet Classification in Large ISPs: Design and Evaluation of Decision Tree Classifiers},
year = {2005},
isbn = {1595930221},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1064212.1064222},
doi = {10.1145/1064212.1064222},
abstract = {Packet classification, although extensively studied, is an evolving problem. Growing and changing needs necessitate the use of larger filters with more complex rules. The increased complexity and size pose implementation challenges on current hardware solutions and drive the development of software classifiers, in particular, decision-tree based classifiers. Important performance measures for these classifiers are time and memory due to required high throughput and use of limited fast memory.We analyze Tier 1 ISP data that includes filters and corresponding traffic from over a hundred edge routers and thousands of interfaces. We provide a comprehensive view on packet classification in an operational network and glean insights that help us design more effective classification algorithms.We propose and evaluate decision tree classifiers with common branches. These classifiers have linear worst-case memory bounds and require much less memory than standard decision tree classifiers, but nonetheless, we show that on our data have similar average and worst-case time performance. We argue that common-branches exploit structure that is present in real-life data sets.We observe a strong Zipf-like pattern in the usage of rules in a classifier, where a very small number of rules resolves the bulk of traffic and most rules are essentially never used. Inspired by this observation, we propose traffic-aware classifiers that obtain superior average-case and bounded worst-case performance. Good average-case can boost performance of software classifiers that can be used in small to medium sized routers and are also important for traffic analysis and traffic engineering.},
booktitle = {Proceedings of the 2005 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems},
pages = {73–84},
numpages = {12},
keywords = {routing, packet filtering, decision trees, access control lists},
location = {Banff, Alberta, Canada},
series = {SIGMETRICS '05}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2006/ancs06-song.pdf
% Andy file name
% 2006-song-et-al-packet-classification-using-coarse-grained-tuple-spaces.pdf
@inproceedings{STD2006,
author = {Song, Haoyu and Turner, Jonathan and Dharmapurikar, Sarang},
title = {Packet Classification Using Coarse-Grained Tuple Spaces},
year = {2006},
isbn = {1595935800},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1185347.1185354},
doi = {10.1145/1185347.1185354},
abstract = {While the problem of high performance packet classification has received a great deal of attention in recent years, the research community has yet to develop algorithmic methods that can overcome the drawbacks of TCAM-based solutions. This paper introduces a hybrid approach, which partitions the filter set into subsets that are easy to search efficiently. The partitioning strategy groups filters that are close to one another in tuple space [10], which makes it possible to use information from single field lookups to limit the number of subsets that must be searched. We can trade-off running time against space consumption by adjusting the coarseness of the tuple space partition. We find that for two-dimensional filter sets, the method finds the best-matching filter with just four hash probes while limiting the memory space expansion factor to about 2. We also introduce a novel method for Longest Prefix Matching (LPM), which we use as a component of the overall packet classification algorithm. Our LPM method uses a small amount of on-chip memory to speedup the search of an off-chip data structure, but uses significantly less on-chip memory than earlier methods based on Bloom filters.},
booktitle = {Proceedings of the 2006 ACM/IEEE Symposium on Architecture for Networking and Communications Systems},
pages = {41–50},
numpages = {10},
keywords = {packet classification, longest prefix matching},
location = {San Jose, California, USA},
series = {ANCS '06}
}

% Andy file name
% 2009-avudaiammal-et-al-ttss-packet-classification-algorithm-to-enhance-multimedia-applications-in-network-processor-based-router.pdf
@article{ASPS2009,
  author       = {R. Avudaiammal and
                  R. SivaSubramanian and
                  R. Pandian and
                  P. Seethalakshmi},
  title        = {{TTSS} Packet Classification Algorithm to enhance Multimedia Applications
                  in Network Processor based Router},
  journal      = {CoRR},
  volume       = {abs/0906.5073},
  year         = {2009},
  url          = {http://arxiv.org/abs/0906.5073},
  eprinttype    = {arXiv},
  eprint       = {0906.5073},
  timestamp    = {Mon, 13 Aug 2018 16:46:59 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-0906-5073.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

% Andy file name
% 1998-decasper-et-al-router-plugins.pdf
@inproceedings{DDPP1998,
author = {Decasper, Dan and Dittia, Zubin and Parulkar, Guru and Plattner, Bernhard},
title = {Router Plugins: A Software Architecture for next Generation Routers},
year = {1998},
isbn = {1581130031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/285237.285285},
doi = {10.1145/285237.285285},
abstract = {Present day routers typically employ monolithic operating systems which are not easily upgradable and extensible. With the rapid rate of protocol development it is becoming increasingly important to dynamically upgrade router software in an incremental fashion. We have designed and implemented a high performance, modular, extended integrated services router software architecture in the NetBSD operating system kernel. This architecture allows code modules, called plugins, to be dynamically added and configured at run time. One of the novel features of our design is the ability to bind different plugins to individual flows; this allows for distinct plugin implementations to seamlessly coexist in the same runtime environment. High performance is achieved through a carefully designed modular architecture; an innovative packet classification algorithm that is both powerful and highly efficient; and by caching that exploits the flow-like characteristics of Internet traffic. Compared to a monolithic best-effort kernel, our implementation requires an average increase in packet processing overhead of only 8\%, or 500 cycles/2.1ms per packet when running on a P6/233.},
booktitle = {Proceedings of the ACM SIGCOMM '98 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
pages = {229–240},
numpages = {12},
keywords = {router plugins, modular router architecture, high performance integrated services routing},
location = {Vancouver, British Columbia, Canada},
series = {SIGCOMM '98}
}

% Andy file name
% 2001-lunteren-Searching_very_large_routing_tables_in_wide_embedded_memory.pdf
@INPROCEEDINGS{Lunt2001,
  author={van Lunteren, J.},
  booktitle={GLOBECOM'01. IEEE Global Telecommunications Conference (Cat. No.01CH37270)},
  title={Searching very large routing tables in wide embedded memory},
  year={2001},
  volume={3},
  number={},
  pages={1615-1619 vol.3},
  doi={10.1109/GLOCOM.2001.965853},
  url={https://doi.org/10.1109/GLOCOM.2001.965853}
}

% Andy file name
% 2001-srinivasan-A_packet_classification_and_filter_management_system.pdf
@INPROCEEDINGS{Srin2001,
  author={Srinivasan, Venkatachary},
  booktitle={Proceedings IEEE INFOCOM 2001. Conference on Computer Communications. Twentieth Annual Joint Conference of the IEEE Computer and Communications Society (Cat. No.01CH37213)},
  title={A packet classification and filter management system},
  year={2001},
  volume={3},
  number={},
  pages={1464-1473 vol.3},
  doi={10.1109/INFCOM.2001.916642},
  url={https://doi.org/10.1109/INFCOM.2001.916642}
}

% Andy file name
% 2004-chang-et-al-Approximate_caches_for_packet_classification.pdf
@INPROCEEDINGS{CFL2004,
  author={Chang, Francis and Wu-chang Feng and Kang Li},
  booktitle={IEEE INFOCOM 2004},
  title={Approximate caches for packet classification},
  year={2004},
  volume={4},
  number={},
  pages={2196-2207 vol.4},
  doi={10.1109/INFCOM.2004.1354643},
  url={https://doi.org/10.1109/INFCOM.2004.1354643}
}

% Andy file name
% 2002-chvets-et-al-Multi-zone_caches_for_accelerating_IP_routing_table_lookups.pdf
@INPROCEEDINGS{CM2002,
  author={Chvets, I.L. and MacGregor, M.H.},
  booktitle={Workshop on High Performance Switching and Routing, Merging Optical and IP Technologie},
  title={Multi-zone caches for accelerating IP routing table lookups},
  year={2002},
  volume={},
  number={},
  pages={121-126},
  doi={10.1109/HPSR.2002.1024220},
  url={https://ieeexplore.ieee.org/document/1024220}
}

% Andy file name
% 2003-li-et-al-architectures-for-packet-classification-caching.pdf
@INPROCEEDINGS{LCBF2003,
  author={Kang Li and Chang, Francis and Damien Berger and Wu-chang Feng},
  booktitle={IEEE ICON 2003},
  title={Architectures for Packet Classification Caching},
  year={2003},
  url={https://cobweb.cs.uga.edu/~kangli/src/icon2003.pdf}
}

% Andy file name
% 2003-dharmapurikar-et-all-longest-prefix-matching-using-bloom-filters.pdf
% https://dl.acm.org/doi/pdf/10.1145/863955.863979
% DKT2006 as later journal version
@inproceedings{DKT2003,
author = {Dharmapurikar, Sarang and Krishnamurthy, Praveen and Taylor, David E.},
title = {Longest Prefix Matching Using Bloom Filters},
year = {2003},
isbn = {1581137354},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/863955.863979},
doi = {10.1145/863955.863979},
abstract = {We introduce the first algorithm that we are aware of to employ Bloom filters for Longest Prefix Matching (LPM). The algorithm performs parallel queries on Bloom filters, an efficient data structure for membership queries, in order to determine address prefix membership in sets of prefixes sorted by prefix length. We show that use of this algorithm for Internet Protocol (IP) routing lookups results in a search engine providing better performance and scalability than TCAM-based approaches. The key feature of our technique is that the performance, as determined by the number of dependent memory accesses per lookup, can be held constant for longer address lengths or additional unique address prefix lengths in the forwarding table given that memory resources scale linearly with the number of prefixes in the forwarding table.Our approach is equally attractive for Internet Protocol Version 6 (IPv6) which uses 128-bit destination addresses, four times longer than IPv4. We present a basic version of our approach along with optimizations leveraging previous advances in LPM algorithms. We also report results of performance simulations of our system using snapshots of IPv4 BGP tables and extend the results to IPv6. Using less than 2Mb of embedded RAM and a commodity SRAM device, our technique achieves average performance of one hash probe per lookup and a worst case of two hash probes and one array access per lookup.},
booktitle = {Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
pages = {201–212},
numpages = {12},
keywords = {forwarding, longest prefix matching, IP lookup},
location = {Karlsruhe, Germany},
series = {SIGCOMM '03}
}


% Andy file name
% 2006-Dharmapurikar-et-al-Longest_prefix_matching_using_bloom_filters.pdf
% DKT2003 is earlier conference version
@ARTICLE{DKT2006,
  author={Dharmapurikar, S. and Krishnamurthy, P. and Taylor, D.E.},
  journal={IEEE/ACM Transactions on Networking},
  title={Longest prefix matching using bloom filters},
  year={2006},
  volume={14},
  number={2},
  pages={397-409},
  doi={10.1109/TNET.2006.872576},
  url={https://doi.org/10.1109/TNET.2006.872576}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2003/jsac03dt.pdf
% Andy file name
% 2003-taylor-et-al-Scalable_IP_lookup_for_Internet_routers.pdf
@ARTICLE{TTLSP2003,
  author={Taylor, David E. and Turner, Jonathan S. and Lockwood, John W. and Sproull, Todd S. and Parlour, David B.},
  journal={IEEE Journal on Selected Areas in Communications},
  title={Scalable IP lookup for Internet routers},
  year={2003},
  volume={21},
  number={4},
  pages={522-534},
  doi={10.1109/JSAC.2003.810507},
  url={https://doi.org/10.1109/JSAC.2003.810507}
}

% later journal version: SV1999
% Alternate url:
% https://dl.acm.org/doi/pdf/10.1145/277858.277863
% Andy file name
% 1998-srinivasan-et-al-faster-ip-lookups-using-controlled-prefix-expansion.pdf
@inproceedings{SV1998,
author = {Srinivasan, Venkatachary and Varghese, George},
title = {Faster IP Lookups Using Controlled Prefix Expansion},
year = {1998},
isbn = {0897919823},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/277851.277863},
doi = {10.1145/277851.277863},
abstract = {Internet (IP) address lookup is a major bottleneck in high performance routers. IP address lookup is challenging because it requires a longest matching prefix lookup. It is compounded by increasing routing table sizes, increased traffic, higher speed links, and the migration to 128 bit IPv6 addresses. We describe how IP lookups can be made faster using a new technique called controlled prefix expansion. Controlled prefix expansion, together with optimization techniques based on dynamic programming, can be used to improve the speed of the best known IP lookup algorithms by at least a factor of two. When applied to trie search, our techniques provide a range of algorithms whose performance can be tuned. For example, with 1 MB of L2 cache, trie search of the MaeEast database with 38,000 prefixes can be done in a worst case search time of 181 nsec, a worst case insert/delete time of 2.5 msec, and an average insert/delete time of 4 usec. Our actual experiments used 512 KB L2 cache to obtain a worst-case search time of 226 nsec, a worst-case worst case insert/delete time of 2.5 msec and an average insert/delete time of 4 usec. We also describe how our techniques can be used to improve the speed of binary search on prefix lengths to provide a scalable solution for IPv6. Our approach to algorithm design is based on measurements using the VTune tool on a Pentium to obtain dynamic clock cycle counts.},
booktitle = {Proceedings of the 1998 ACM SIGMETRICS Joint International Conference on Measurement and Modeling of Computer Systems},
pages = {1–10},
numpages = {10},
location = {Madison, Wisconsin, USA},
series = {SIGMETRICS '98/PERFORMANCE '98}
}

% earlier conference version: SV1998
% Andy file name
% 1999-srinivasan-et-al-fast-address-lookups-using-controlled-prefix-expansion.pdf
@article{SV1999,
author = {Srinivasan, V. and Varghese, G.},
title = {Fast Address Lookups Using Controlled Prefix Expansion},
year = {1999},
issue_date = {Feb. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {1},
issn = {0734-2071},
url = {https://doi.org/10.1145/296502.296503},
doi = {10.1145/296502.296503},
abstract = {Internet (IP) address lookup is a major bottleneck in high-performance routers. IP address lookup is challenging because it requires a longest matching prefix lookup. It is compounded by increasing routing table sizes, increased traffic, higher-speed links, and the migration to 128-bit IPv6 addresses. We describe how IP lookups and updates can be made faster using a set of of transformation techniques. Our main technique, controlled prefix expansion, transforms a set of prefixes into an equivalent set with fewer prefix lengths. In addition, we use optimization techniques based on dynamic programming, and local transformations of data structures to improve cache behavior. When applied to trie search, our techniques provide a range of algorithms     (Expanded Tries) whose performance can be tuned. For example, using a processor with 1MB of L2 cache, search of the MaeEast database containing 38000 prefixes can be done in 3 L2 cache accesses. On a 300MHz Pentium II which takes 4 cycles for accessing the first word of the L2 cacheline, this algorithm has a worst-case search time of 180 nsec., a worst-case insert/delete time of 2.5 msec., and an average insert/delete time of 4 usec. Expanded tries provide faster search and faster insert/delete times than earlier lookup algirthms. When applied to Binary Search on Levels, our techniques improve worst-case search times by nearly a factor of 2 (using twice as much storage) for the MaeEast database. Our approach to algorithm design is based on measurements     using the VTune tool on a Pentium to obtain dynamic clock cycle counts. Our techniques also apply to similar address lookup problems in other network protocols.},
journal = {ACM Trans. Comput. Syst.},
month = {feb},
pages = {1–40},
numpages = {40},
keywords = {multibit tries, router preformance, longest-prefix match, binary search on levels, expanded tries, controlled prefix expansion, Internet address lookup}
}

% Alternate url
% https://cseweb.ucsd.edu/~varghese/PAPERS/ToN99.pdf
% https://dl.acm.org/doi/pdf/10.1109/90.779199
% Andy file name
% 1999-lampson-et-al-ip-lookups-using-multiway-and-multicolumn-search.pdf
@article{LSV1999,
author = {Lampson, Butler and Srinivasan, Venkatachary and Varghese, George},
title = {IP Lookups Using Multiway and Multicolumn Search},
year = {1999},
issue_date = {June 1999},
publisher = {IEEE Press},
volume = {7},
number = {3},
issn = {1063-6692},
url = {https://doi.org/10.1109/90.779199},
doi = {10.1109/90.779199},
journal = {IEEE/ACM Trans. Netw.},
month = {jun},
pages = {324–334},
numpages = {11}
}

% Andy file name
% 2002-buddhikot-et-al-space-decomposition-techniques-for-fast-layer-4-switching.pdf
% Another URL with PDF available:
% https://www.researchgate.net/publication/2406327_Space_Decomposition_Techniques_For_Fast_Layer-4_Switching
@article{BSW2002,
author = {Buddhikot, Milind and Suri, Subhash and Waldvogel, Marcel},
year = {2002},
month = {03},
pages = {},
title = {Space Decomposition Techniques For Fast Layer-4 Switching},
isbn = {978-1-4757-6318-8},
doi = {10.1007/978-0-387-35580-1_4},
url = {http://dx.doi.org/10.1007/978-0-387-35580-1_4}
}

% Andy file name
% 2005-sun-et-al-Packet_classification_consuming_small_amount_of_memory.pdf
@ARTICLE{SSZ2005,
  author={Xuehong Sun and Sahni, Sartaj K. and Zhao, Yiqiang Q.},
  journal={IEEE/ACM Transactions on Networking},
  title={Packet classification consuming small amount of memory},
  year={2005},
  volume={13},
  number={5},
  pages={1135-1145},
  doi={10.1109/TNET.2005.857070},
  url={https://doi.org/10.1109/TNET.2005.857070}
}

% Andy file name
% 2009-Packet_classification_algorithms.pdf
@INPROCEEDINGS{DBB2009,
  author={Dixit, Mrudul and Barbadekar, B. V. and Barbadekar, Ashwinee B.},
  booktitle={2009 IEEE International Symposium on Industrial Electronics},
  title={Packet classification algorithms},
  year={2009},
  volume={},
  number={},
  pages={1407-1412},
  doi={10.1109/ISIE.2009.5215939},
  url={https://doi.org/10.1109/ISIE.2009.5215939}
}

% Andy file name
% 2024-lin-et-al-scalable-packet-classification-based-on-rule-categorization-and-cross-producting.pdf
@article{LW2024,
title = {Scalable packet classification based on rule categorization and cross-producting},
journal = {Computer Networks},
volume = {238},
pages = {110116},
year = {2024},
issn = {1389-1286},
doi = {https://doi.org/10.1016/j.comnet.2023.110116},
url = {https://www.sciencedirect.com/science/article/pii/S1389128623005613},
author = {Hsin-Tsung Lin and Pi-Chung Wang},
keywords = {Packet classification, Software-defined networking, Network security, Packet forwarding, Firewalls, QoS},
abstract = {Packet classification performs multidimensional point location upon fields in packet headers to categorize packets into multiple forwarding classes based on pre-defined rules. It plays an important role for the data plane of software-defined networking (SDN). Packet classification is also applied to support quality of service and network security. In this work, we propose an algorithm, Segregated Cross-producting, to improve the scalability of cross-producting in term of storage. Our algorithm starts by categorizing rules according to their length combinations, where the rules of the same length combination do not incur any storage penalty for cross-producting. Then, the algorithm selectively merges rules of different length combinations to improve the search performance. Our scheme is suitable for parallel implementation to further improve speed performance and can support real-time incremental updates. We extensively evaluate the performance of our scheme with rulesets of different sizes and characteristics. The experiment results show that our scheme can provide superior scalability for both speed and space performance.}
}

% Andy file name
% 1993-mcaulay-et-al-fast-routing-table-lookup-using-cams.pdf
% alternate url
% https://www.cs.cornell.edu/people/francis/mcauley93fast.pdf
@INPROCEEDINGS{MF1993,
  author={McAuley, Anthony J. and Francis, Paul},
  booktitle={IEEE INFOCOM '93 The Conference on Computer Communications, Proceedings},
  title={Fast routing table lookup using CAMs},
  year={1993},
  volume={},
  number={},
  pages={1382-1391 vol.3},
  doi={10.1109/INFCOM.1993.253403},
  url={https://doi.org/10.1109/INFCOM.1993.253403}
}

% Andy file name
% 2000-shah-et-al-fast-incremental-updates-on-ternary-cams-for-routing-lookups-and-packet-classification.pdf
% alternate url
% https://devavrat.mit.edu/wp-content/uploads/2017/11/Fast_incremental_updates_on_Ternary-CAMs.pdf
@inproceedings{SG2000,
  title={Fast incremental updates on Ternary-CAMs for routing lookups and packet classification},
  booktitle={Hot Interconnects VIII},
  author={Devavrat Shah and Pankaj Gupta},
  year={2000},
  url={https://devavrat.mit.edu/publications/fast-incremental-updates-on-ternary-cams-for-routing-lookups-and-packet-classification/}
}

% Andy file name
% 1981-fredman-a-lower-bound-on-the-complexity-of-orthogonal-range-queries.pdf
@article{Fred1981,
author = {Fredman, Michael L.},
title = {A Lower Bound on the Complexity of Orthogonal Range Queries},
year = {1981},
issue_date = {Oct. 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {4},
issn = {0004-5411},
url = {https://doi.org/10.1145/322276.322281},
doi = {10.1145/322276.322281},
journal = {J. ACM},
month = {oct},
pages = {696–705},
numpages = {10}
}

% Andy file name
% 1990-chazelle-lower-bounds-for-orthogonal-range-searching-i-the-reporting-case.pdf
@article{Chaz1990a,
author = {Chazelle, Bernard},
title = {Lower Bounds for Orthogonal Range Searching: I. The Reporting Case},
year = {1990},
issue_date = {April 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/77600.77614},
doi = {10.1145/77600.77614},
abstract = {We establish lower bounds on the complexity of orthogonal range reporting in the static case. Given a collection of n points in d-space and a box [a1, b1] X … X [ad, bd], report every point whose ith coordinate lies in [ai, bi], for each i = l, … , d. The collection of points is fixed once and for all and can be preprocessed. The box, on the other hand, constitutes a query that must be answered online. It is shown that on a pointer machine a query time of O(k + polylog(n)), where k is the number of points to be reported, can only be achieved at the expense of Ω(n(log n/log log n)d-1) storage. Interestingly, these bounds are optimal in the pointer machine model, but they can be improved (ever so slightly) on a random access machine. In a companion paper, we address the related problem of adding up weights assigned to the points in the query box.},
journal = {J. ACM},
month = {apr},
pages = {200–212},
numpages = {13}
}

% Andy file name
% 1990-chazelle-lower-bounds-for-orthogonal-range-searching-ii-the-arithmetic-model.pdf
@article{Chaz1990b,
author = {Chazelle, Bernard},
title = {Lower Bounds for Orthogonal Range Searching: Part II. The  Arithmetic Model},
year = {1990},
issue_date = {July 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {3},
issn = {0004-5411},
url = {https://doi.org/10.1145/79147.79149},
doi = {10.1145/79147.79149},
abstract = {Lower bounds on the complexity of orthogonal range searching in the static case are established. Specifically, we consider the following dominance search problem: Given a collection of n weighted points in d-space and a query point q, compute the cumulative weight of the points dominated (in all coordinates) by q. It is assumed that the weights are chosen in a commutative semigroup and that the query time measures only the number of arithmetic operations needed to compute the answer. It is proved that if m units of storage are available, then the query time is at least proportional to (log n/log(2m/n))d–*1 in both the worst and average cases. This lower bound is provably tight for m = Ω(n(log n) d–1+ϵ) and any fixed ϵ > 0. A lower bound of Ω(n/log log n)d) on the time required for executing n inserts and queries is also established.  —Author's Abstract},
journal = {J. ACM},
month = {jul},
pages = {439–463},
numpages = {25}
}

% Andy file name
% todo
@inproceedings{RTKMH2013,
author = {R\'{e}tv\'{a}ri, G\'{a}bor and Tapolcai, J\'{a}nos and K\H{o}r\"{o}si, Attila and Majd\'{a}n, Andr\'{a}s and Heszberger, Zal\'{a}n},
title = {Compressing IP Forwarding Tables: Towards Entropy Bounds and Beyond},
year = {2013},
isbn = {9781450320566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2486001.2486009},
doi = {10.1145/2486001.2486009},
abstract = {Lately, there has been an upsurge of interest in compressed data structures, aiming to pack ever larger quantities of information into constrained memory without sacrificing the efficiency of standard operations, like random access, search, or update. The main goal of this paper is to demonstrate how data compression can benefit the networking community, by showing how to squeeze the IP Forwarding Information Base (FIB), the giant table consulted by IP routers to make forwarding decisions, into information-theoretical entropy bounds, with essentially zero cost on longest prefix match and FIB update. First, we adopt the state-of-the-art in compressed data structures, yielding a static entropy-compressed FIB representation with asymptotically optimal lookup. Then, we re-design the venerable prefix tree, used commonly for IP lookup for at least 20 years in IP routers, to also admit entropy bounds and support lookup in optimal time and update in nearly optimal time. Evaluations on a Linux kernel prototype indicate that our compressors encode a FIB comprising more than 440K prefixes to just about 100--400 KBytes of memory, with a threefold increase in lookup throughput and no penalty on FIB updates.},
booktitle = {Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM},
pages = {111–122},
numpages = {12},
keywords = {ip forwarding table lookup, data compression, prefix tree},
location = {Hong Kong, China},
series = {SIGCOMM '13}
}

% Andy file name
% 2005-taylor-et-al-on-using-content-addressable-memory-for-packet-classification.pdf
@Techreport{TS2005,
  author =       "Taylor, David E. and Spitznagel, Edward W.",
  year =         "2005",
  title = {On using content addressable memory for packet classification},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2005-9",
  address =      "St. Louis, MO",
  month =        "May",
  note =         "",
  url={https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1980&context=cse_research}
}

% Andy file name
% 2008-aldiab-et-al-packet-classification-by-multilevel-cutting-of-the-classification-space.pdf
@article{AGCS2008,
author = {Aldiab, Motasem and Garcia-Palacios, Emi and Crookes, Danny and Sezer, Sakir},
title = {Packet Classification by Multilevel Cutting of the Classification Space: An Algorithmic-Architectural Solution for IP Packet Classification in next Generation Networks},
year = {2008},
issue_date = {January 2008},
publisher = {Hindawi Limited},
address = {London, GBR},
volume = {2008},
issn = {1687-7381},
url = {https://doi.org/10.1155/2008/603860},
doi = {10.1155/2008/603860},
abstract = {Traditionally, the Internet provides only a "best-effort" service, treating all packets going to the same destination equally. However, providing differentiated services for different users based on their quality requirements is increasingly becoming a demanding issue. For this, routers need to have the capability to distinguish and isolate traffic belonging to different flows. This ability to determine the flow each packet belongs to is called packet classification. Technology vendors are reluctant to support algorithmic solutions for classification due to their nondeterministic performance. Although content addressable memories (CAMs) are favoured by technology vendors due to their deterministic high-lookup rates, they suffer from the problems of high-power consumption and high-silicon cost. This paper provides a new algorithmic-architectural solution for packet classification that mixes CAMs with algorithms based on multilevel cutting of the classification space into smaller spaces. The provided solution utilizes the geometrical distribution of rules in the classification space. It provides the deterministic performance of CAMs, support for dynamic updates, and added flexibility for system designers.},
journal = {J. Comp. Sys., Netw., and Comm.},
month = {jan},
articleno = {11},
numpages = {14}
}

% Alternate url
% https://arxiv.org/pdf/1909.07159.pdf
% Andy file name
% 2019-shen-et-al-rvh-range-vector-hash-for-fast-online-packet-classification.pdf
@misc{SXWL+2019,
  title={RVH: Range-Vector Hash for Fast Online Packet Classification},
  author={Tong Shen and Gaogang Xie and Xin Wang and Zhenyu Li and Xinyi Zhang and Penghao Zhang and Dafang Zhang},
  year={2019},
  eprint={1909.07159},
  archivePrefix={arXiv},
  primaryClass={cs.NI},
  url={https://arxiv.org/abs/1909.07159}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2013/ton-2013song.pdf
% Andy file name
% 2013-song-et-al-abc-adaptive-binary-cuttings-for-multidimensional-packet-classification.pdf
@ARTICLE{ST2013,
  author={Song, Haoyu and Turner, Jonathan S.},
  journal={IEEE/ACM Transactions on Networking},
  title={ABC: Adaptive Binary Cuttings for Multidimensional Packet Classification},
  year={2013},
  volume={21},
  number={1},
  pages={98-109},
  doi={10.1109/TNET.2012.2190519},
  url={https://doi.org/10.1109/TNET.2012.2190519}
}

% tech report version: DSTL2006a
% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2006/ancs06-dharmapurikar.pdf
% Andy file name
% 2006-dharmapurikar-et-al-fast-packet-classification-using-bloom-filters.pdf
@INPROCEEDINGS{DSTL2006b,
  author={Dharmapurikar, Sarang and Song, Haoyu and Turner, Jonathan and Lockwood, John},
  booktitle={2006 Symposium on Architecture For Networking And Communications Systems},
  title={Fast packet classification using Bloom filters},
  year={2006},
  volume={},
  number={},
  pages={61-70},
  doi={10.1145/1185347.1185356},
  url={https://doi.org/10.1145/1185347.1185356}
}

% conference version: DSTL2006b
% Andy file name
% 2006-dharmapurikar-et-al-fast-packet-classification-using-bloom-filters-tech-report.pdf
@Techreport{DSTL2006a,
  author={Dharmapurikar, Sarang and Song, Haoyu and Turner, Jonathan and Lockwood, John},
  year =         "2006",
  title={Fast packet classification using Bloom filters},
  institution =  "Washington University in St. Louis",
  number =       "WUCSE-2006-27",
  address =      "St. Louis, MO",
  month =        "May",
  note =         "",
  url={https://openscholarship.wustl.edu/cgi/viewcontent.cgi?article=1175&context=cse_research}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2006/ancs06-kumar1.pdf
% Andy file name
% 2006-kumar-et-all-camp-fast-and-efficient-ip-lookup-architecture.pdf
@inproceedings{KBCT2006,
author = {Kumar, Sailesh and Becchi, Michela and Crowley, Patrick and Turner, Jonathan},
title = {CAMP: Fast and Efficient IP Lookup Architecture},
year = {2006},
isbn = {1595935800},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1185347.1185355},
doi = {10.1145/1185347.1185355},
abstract = {A large body of research literature has focused on improving the performance of longest prefix match IP-lookup. More recently, embedded memory based architectures have been proposed, which delivers very high lookup and update throughput. These architectures often use a pipeline of embedded memories, where each stage stores a single or set of levels of the lookup trie. A stream of lookup requests are issued into the pipeline, one every cycle, in order to achieve high throughput. Most recently, Baboescu et al. [21] have proposed a novel architecture, which uses circular memory pipeline and dynamically maps parts of the lookup trie to different stages.In this paper we extend this approach with an architecture called Circular, Adaptive and Monotonic Pipeline (CAMP), which is based upon the key observation that circular pipeline allows decoupling the number of pipeline stages from the number of levels in the trie. This provides much more flexibility in mapping nodes of the lookup trie to the stages. The flexibility, in turn, improves the memory utilization and also reduces the total memory and power consumption. The flexibility comes at a cost however; since the requests are issued at an arbitrary stage, they may get blocked if their entry stage is busy. In an extreme case, a request may block for a time equal to the pipeline depth, which may severely affect the pipeline utilization. We show that fairly straightforward techniques can ensure nearly full utilization of the pipeline. These techniques, coupled with an adaptive mapping of trie nodes to the circular pipeline, create a pipelined architecture which can operate at high rates irrespective of the trie size.},
booktitle = {Proceedings of the 2006 ACM/IEEE Symposium on Architecture for Networking and Communications Systems},
pages = {51–60},
numpages = {10},
keywords = {IP lookup, internet router, longest prefix match},
location = {San Jose, California, USA},
series = {ANCS '06}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2006/globecom06.pdf
% Andy file name
% 2006-song-et-al-nxg05-2-fast-filter-updates-for-packet-classification-using-tcam.pdf
@INPROCEEDINGS{ST2006,
  author={Song, Haoyu and Turner, Jonathan},
  booktitle={IEEE Globecom 2006},
  title={NXG05-2: Fast Filter Updates for Packet Classification using TCAM},
  year={2006},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/GLOCOM.2006.342},
  url={https://doi.org/10.1109/GLOCOM.2006.342}
}

% alternate url
% https://www.arl.wustl.edu/~jon.turner/pubs/2005/icnp05.pdf
% Andy file name
% 2005-song-et-al-shape-shifting-tries-for-faster-ip-route-lookup.pdf
@inproceedings{STL2005,
author = {Song, Haoyu and Turner, Jonathan and Lockwood, John},
title = {Shape Shifting Tries for Faster IP Route Lookup},
year = {2005},
isbn = {0769524370},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICNP.2005.36},
doi = {10.1109/ICNP.2005.36},
abstract = {Some of the fastest practical algorithms for IP route lookup are based on space-efficient encodings of multi-bit tries [1, 2]. Unfortunately, the time required by these algorithms grows in proportion to the address length, making them less attractive for IPv6. This paper describes and evaluates a new data structure called a shape-shifting trie, in which the data structure nodes correspond to arbitrarily shaped subtrees of the underlying binary trie for a given set of address prefixes. The ability to adapt the node shape to the trie reduces the number of nodes that must be accessed to perform a lookup, especially for tries with large sparse regions. We give a fast algorithmfor optimally dividing a trie into nodes so as to minimize the maximum lookup depth. We show that seven data structure accesses are suffi- cient for route tables with more than 150,000 IPv6 prefixes. This makes it possible to achieve wire-speed processing for OC192 link using a single QDRII SRAM chip.},
booktitle = {Proceedings of the 13TH IEEE International Conference on Network Protocols},
pages = {358–367},
numpages = {10},
series = {ICNP '05}
}

% alternate url
% http://yuba.stanford.edu/~nickm/papers/classification_tutorial_01.pdf
% Andy file name
% 2001-gupta-et-al-algorithms-for-packet-classification.pdf
@ARTICLE{GM2001,
  author={Gupta, P. and McKeown, N.},
  journal={IEEE Network},
  title={Algorithms for packet classification},
  year={2001},
  volume={15},
  number={2},
  pages={24-32},
  doi={10.1109/65.912717},
  url={https://doi.org/10.1109/65.912717}
}

% alternate url
% http://yuba.stanford.edu/~nickm/papers/Ifip00.pdf
% Andy file name
% 2000-gupta-et-al-dynamic-algorithms-with-worst-case-performance-for-packet-classification.pdf
@InProceedings{GM2000b,
author="Gupta, Pankaj
and McKeown, Nick",
editor="Pujolle, Guy
and Perros, Harry
and Fdida, Serge
and K{\"o}rner, Ulf
and Stavrakakis, Ioannis",
title="Dynamic Algorithms with Worst-Case Performance for Packet Classification",
booktitle="Networking 2000 Broadband Communications, High Performance Networking, and Performance of Communication Networks",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="528--539",
abstract="Packet classification involves --- given a set of rules --- finding the highest priority rule matching an incoming packet. When designing packet classification algorithms, three metrics need to be considered: query time, update time and storage requirements. The algorithms proposed to-date have been heuristics that exploit structure inherent in the classification rules, and/or trade off one or more metrics for others. In this paper, we describe two new simple dynamic classification algorithms, Heap-on-Trie or HoT and Binarysearchtree-on-Trie or BoT for general classifiers. The performance of these algorithms is considered in the worst-case, i.e., without assumptions about structure in the classification rules. They are also designed to perform well (though not necessarily the ``best'') in each of the metrics simultaneously.",
isbn="978-3-540-45551-6",
url={https://doi.org/10.1007/3-540-45551-5_45}
}

% Andy file name
% 2003-zane-et-al-coolcams-power-efficient-tcams-for-forwarding-engines.pdf
@INPROCEEDINGS{ZNB2003,
  author={Zane, Francis and Girija Narlikar and Basu, Anindya},
  booktitle={IEEE INFOCOM 2003. Twenty-second Annual Joint Conference of the IEEE Computer and Communications Societies (IEEE Cat. No.03CH37428)},
  title={Coolcams: power-efficient TCAMs for forwarding engines},
  year={2003},
  volume={1},
  number={},
  pages={42-52 vol.1},
  doi={10.1109/INFCOM.2003.1208657},
  url={https://doi.org/10.1109/INFCOM.2003.1208657}
}

% Andy file name
% todo
@INPROCEEDINGS{ZCWL2005,
  author={Kai Zheng and Hao Che and Zhijun Wang and Bin Liu},
  booktitle={Proceedings IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies.},
  title={TCAM-based distributed parallel packet classification algorithm with range-matching solution},
  year={2005},
  volume={1},
  number={},
  pages={293-303 vol. 1},
  doi={10.1109/INFCOM.2005.1497900},
  url={https://doi.org/10.1109/INFCOM.2005.1497900}
}

% tech report version: YK2004a
% Andy file name
% todo
@INPROCEEDINGS{YK2004b,
  author={Fang Yu and Katz, Randy H.},
  booktitle={Proceedings. 12th Annual IEEE Symposium on High Performance Interconnects},
  title={Efficient multi-match packet classification with TCAM},
  year={2004},
  volume={},
  number={},
  pages={28-34},
  doi={10.1109/CONECT.2004.1375197},
  url={https://doi.org/10.1109/CONECT.2004.1375197}
}

% conference version: YK2004
% Andy file name
% 2004-yu-et-al-efficient-multi-match-packet-classification-with-tcam-tech-report.pdf
@techreport{YK2004a,
    Author = {Yu, Fang and Katz, Randy H.},
    Title = {Efficient Multi-Match Packet Classification with TCAM},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2004},
    Month = {Mar},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2004/5589.html},
    Number = {UCB/CSD-04-1316},
    Abstract = {Today's packet classification systems are designed to provide the highest priority matching result, e.g., the longest prefix match, even if a packet matches multiple classification rules. However, new network applications, such as intrusion detection systems, require information about all matching results. We call this the multi-match classification problem. In several complex network applications, multi-match classification is usually the first step followed by other processing that is dependent on the classification results. Therefore, classification should be even faster than line rate. Pure software solutions cannot support such applications due to their slow speeds. <p>In this paper, we present a solution with Ternary Content Addressable Memory (TCAM), which produces multi-match classification results with only one TCAM lookup and one SRAM lookup per packet -- about ten times fewer memory lookups than pure software solutions. In addition, we present a scheme to remove the negation format in rule sets, which can save up to 95\% of TCAM space than the straight-forward solution. We show that using the pre-processing scheme presented in the paper, header processing for SNORT rule set can be done with one TCAM and one SRAM lookup using a 135KB TCAM.}
}

% Andy file name
% 2005-yu-et-al-ssa-a-power-and-memory-efficient-scheme-to-multi-match-packet-classification.pdf
@inproceedings{YLMK2005,
author = {Yu, Fang and Lakshman, T. V. and Motoyama, Martin Austin and Katz, Randy H.},
title = {SSA: A Power and Memory Efficient Scheme to Multi-Match Packet Classification},
year = {2005},
isbn = {1595930825},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1095890.1095905},
doi = {10.1145/1095890.1095905},
abstract = {New network applications like intrusion detection systems and packet-level accounting require multi-match packet classification, where all matching filters need to be reported. Ternary Content Addressable Memories (TCAMs) have been adopted to solve the multi-match classification problem due to their ability to perform fast parallel matching. However, TCAM is expensive and consumes large amounts of power. None of the previously published multi-match classification schemes is both memory and power efficient. In this paper, we develop a novel scheme that meets both requirements by using a new Set Splitting Algorithm (SSA). The main idea of SSA is that it splits filters into multiple groups and performs separate TCAM lookups into these groups. It guarantees the removal of at least half the intersections when a filter set is split into two sets, thus resulting in low TCAM memory usage. SSA also accesses filters in the TCAM only once per packet, leading to low power consumption. We compare SSA with two best known schemes: MUD [1] and Geometric Intersection-based solutions [2]. Simulation results based on the SNORT filter sets show that SSA uses approximately the same amount of TCAM memory as MUD, but yields a 75\% to 95\% reduction in power consumption. Compared with Geometric Intersection-based solutions, SSA uses 90\% less TCAM memory and power at the cost of one additional TCAM lookup per packet.},
booktitle = {Proceedings of the 2005 ACM Symposium on Architecture for Networking and Communications Systems},
pages = {105–113},
numpages = {9},
keywords = {multiple-match, packet classification, TCAM, energy-efficient design},
location = {Princeton, NJ, USA},
series = {ANCS '05}
}

% Andy file name
% 1995-rim-nakajima-rectangle-intersection-and-overlap-graphs.pdf
@ARTICLE{RN1995,
  author={Rim, Chong S. and Nakajima, Kazuo},
  journal={IEEE Transactions on Circuits and Systems I: Fundamental Theory and Applications},
  title={On rectangle intersection and overlap graphs},
  year={1995},
  volume={42},
  number={9},
  pages={549-553},
  doi={10.1109/81.414831},
  url={https://doi.org/10.1109/81.414831}
}

% Andy file name
% 2003-suri-et-al-compressing-two-dimensional-routing-tables.pdf
@article{SSW2003,
  author =       "Subhash Suri and Tuomas Sandholm and Priyank Warkhede",
  year =         "2003",
  title =        "Compressing Two-Dimensional Routing Tables",
  journal =      "Algorithmica",
  volume =       "35",
  number =       "4",
  pages = {287-300},
  url = {https://doi.org/10.1007/s00453-002-1000-7},
  doi = {10.1007/s00453-002-1000-7},
  abstract = {We consider an algorithmic problem that arises in the context of routing tables used by Internet routers. The Internet addressing scheme is hierarchical, where a group of hosts are identified by a prefix that is common to all the hosts in that group. Each host machine has a unique 32-bit address. Thus, all traffic between a source group s  and a destination group d  can be routed along a particular route c  by maintaining a routing entry (s, d, c)  at all intermediate routers, where s  and d  are binary bit strings. Many different routing tables can achieve the same routing behavior. In this paper we show how to compute the most compact routing table. In particular, we consider the following optimization problem: given a routing table D with N  entries of the form (s, d, c) , determine a conflict-free routing table with fewest entries that has the same routing behavior as D. If the source and destination fields have up to w  bits, and there are at most K  different route values, then our algorithm runs in worst-case time $O(NK w^2)$.}
}

% Andy file name
% 2006-pagiamtzis-et-al-cam-circuits.pdf
@ARTICLE{PS2006,
  author={Pagiamtzis, Kostas and Sheikholeslami, Ali},
  journal={IEEE Journal of Solid-State Circuits},
  title={Content-addressable memory (CAM) circuits and architectures: a tutorial and survey},
  year={2006},
  volume={41},
  number={3},
  pages={712-727},
  doi={10.1109/JSSC.2005.864128},
  url={https://doi.org/10.1109/JSSC.2005.864128}
}

% Andy file name
% 2015-kuzniar-et-al-sdn-flow-tables.pdf
@InProceedings{KPK2015,
author="Ku{\'{z}}niar, Maciej
and Pere{\v{s}}{\'i}ni, Peter
and Kosti{\'{c}}, Dejan",
editor="Mirkovic, Jelena
and Liu, Yong",
title="What You Need to Know About SDN Flow Tables",
booktitle="Passive and Active Measurement",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="347--359",
abstract="SDN deployments rely on switches that come from various vendors and differ in terms of performance and available features. Understanding these differences and performance characteristics is essential for ensuring successful deployments. In this paper we measure, report, and explain the performance characteristics of flow table updates in three hardware OpenFlow switches. Our results can help controller developers to make their programs efficient. Further, we also highlight differences between the OpenFlow specification and its implementations, that if ignored, pose a serious threat to network security and correctness.",
isbn="978-3-319-15509-8",
url="https://doi.org/10.1007/978-3-319-15509-8_26"
}

% Andy file name
% 2017-daly-et-al-tuplemerge-building-online-packet-classifiers-by-omitting-bits.pdf
@INPROCEEDINGS{DT2017,
  author={Daly, James and Torng, Eric},
  booktitle={2017 26th International Conference on Computer Communication and Networks (ICCCN)},
  title={TupleMerge: Building Online Packet Classifiers by Omitting Bits},
  year={2017},
  volume={},
  number={},
  pages={1-10},
  doi={10.1109/ICCCN.2017.8038399},
  url={https://doi.org/10.1109/ICCCN.2017.8038399}
}

% Andy file name
% todo
@ARTICLE{CW2016a,
  author={Chang, Dao-Yuan and Wang, Pi-Chung},
  journal={IEEE/ACM Transactions on Networking},
  title={TCAM-Based Multi-Match Packet Classification Using Multidimensional Rule Layering},
  year={2016},
  volume={24},
  number={2},
  pages={1125-1138},
  doi={10.1109/TNET.2015.2411274},
  url={https://doi.org/10.1109/TNET.2015.2411274}
}

% Andy file name
% todo
@ARTICLE{CW2016b,
  author={Cheng, Yu-Chieh and Wang, Pi-Chung},
  journal={IEEE Transactions on Computers},
  title={Scalable Multi-Match Packet Classification Using TCAM and SRAM},
  year={2016},
  volume={65},
  number={7},
  pages={2257-2269},
  doi={10.1109/TC.2015.2470242},
  url={https://doi.org/10.1109/TC.2015.2470242}
}

% Andy file name
% todo
@ARTICLE{CW2015,
  author={Cheng, Yu-Chieh and Wang, Pi-Chung},
  journal={IEEE Transactions on Computers},
  title={Packet Classification Using Dynamically Generated Decision Trees},
  year={2015},
  volume={64},
  number={2},
  pages={582-586},
  doi={10.1109/TC.2013.227},
  url={https://doi.org/10.1109/TC.2013.227}
}

% Andy file name
% todo
@ARTICLE{ZWZC2023,
  author={Zhong, Jincheng and Wei, Ziling and Zhao, Shuang and Chen, Shuhui},
  journal={IEEE/ACM Transactions on Networking},
  title={TupleTree: A High-Performance Packet Classification Algorithm Supporting Fast Rule-Set Updates},
  year={2023},
  volume={31},
  number={5},
  pages={2027-2041},
  doi={10.1109/TNET.2022.3227206},
  url={https://doi.org/10.1109/TNET.2022.3227206}
}

% Andy file name
% todo
@ARTICLE{YDLT2018,
  author={Yingchareonthawornchai, Sorrachai and Daly, James and Liu, Alex X. and Torng, Eric},
  journal={IEEE/ACM Transactions on Networking},
  title={A Sorted-Partitioning Approach to Fast and Scalable Dynamic Packet Classification},
  year={2018},
  volume={26},
  number={4},
  pages={1907-1920},
  doi={10.1109/TNET.2018.2852710},
  url={https://doi.org/10.1109/TNET.2018.2852710}
}

% Andy file name
% todo
@ARTICLE{RRS2023,
  author={Rashelbach, Alon and Rottenstreich, Ori and Silberstein, Mark},
  journal={IEEE/ACM Transactions on Networking},
  title={Scaling by Learning: Accelerating Open vSwitch Data Path With Neural Networks},
  year={2023},
  volume={31},
  number={3},
  pages={1230-1243},
  doi={10.1109/TNET.2022.3215143},
  url={https://doi.org/10.1109/TNET.2022.3215143}
}

% Andy file name
% todo
@ARTICLE{Wang2014,
  author={Wang, Pi-Chung},
  journal={IEEE Journal on Selected Areas in Communications},
  title={Scalable Packet Classification for Datacenter Networks},
  year={2014},
  volume={32},
  number={1},
  pages={124-137},
  doi={10.1109/JSAC.2014.140112},
  url={https://doi.org/10.1109/JSAC.2014.140112}
}

% Andy file name
% todo
@ARTICLE{VLZL2016,
  author={Varvello, Matteo and Laufer, Rafael and Zhang, Feixiong and Lakshman, T. V.},
  journal={IEEE/ACM Transactions on Networking},
  title={Multilayer Packet Classification With Graphics Processing Units},
  year={2016},
  volume={24},
  number={5},
  pages={2728-2741},
  doi={10.1109/TNET.2015.2491265},
  url={https://doi.org/10.1109/TNET.2015.2491265}
}

% Andy file name
% todo
@article{ZXW2022,
title = {DynamicTuple: The dynamic adaptive tuple for high-performance packet classification},
journal = {Computer Networks},
volume = {202},
pages = {108630},
year = {2022},
issn = {1389-1286},
doi = {https://doi.org/10.1016/j.comnet.2021.108630},
url = {https://www.sciencedirect.com/science/article/pii/S1389128621005193},
author = {Chunyang Zhang and Gaogang Xie and Xin Wang},
keywords = {Packet classification, Software Defined Networking, Open vSwitch},
abstract = {The frequent rule updating in Software Defined Networking and cloud computing requires the packet classification algorithm to perform fast packet matching and flow table updating simultaneously. The existing algorithms, e.g. decision-tree-based or hash-based, achieve fast packet classification at the sacrifice of the rule updating or vice versa. We propose the Dynamic Adaptive Tuple (DynamicTuple) for both fast packet classification and rule updating simultaneously. DynamicTuple builds a performance model of tuple based packet classification and exploits dynamic programming to find the appropriate tuple formulation to minimize the lookup time. When the rules keep updating, DynamicTuple can retain the proper tuples and rebuild the improper tuples, thus the tuple in DynamicTuple is dynamic adaptive. The experimental results demonstrate that DynamicTuple achieves 33.1x, 5.6x, 5.7x classification speed and 2.9x, 11.0x, 8.5x updating speed compared to Tuple Space Search, TupleMerge, PartitionSort. By implementing DynamicTuple, the OpenFlow table of Open vSwitch achieves 26.6x classification speed.}
}

% Andy file name
% todo
@INPROCEEDINGS{WWWZC2022,
  author={Wang, Jiayao and Wei, Ziling and Wang, Baosheng and Zhong, Jincheng and Chen, Shuhui},
  booktitle={2022 IEEE International Performance, Computing, and Communications Conference (IPCCC)},
  title={FATSS: Filter-Assisted Tuple Space Search for Packet Classification},
  year={2022},
  volume={},
  number={},
  pages={305-312},
  doi={10.1109/IPCCC55026.2022.9894302},
  url={https://doi.org/10.1109/IPCCC55026.2022.9894302}
}

% alternate url
% https://yangtonghome.github.io/uploads/ancs2019-TabTree.pdf
% Andy file name
% 2019-li-et-al-tabtree-a-tss-assisted-bit-selecting-tree-scheme-for-packet-classification-with-balanced-rule-mapping.pdf
@INPROCEEDINGS{LYCLL2019,
  author={Li, Wenjun and Yang, Tong and Chang, Yeim-Kuan and Li, Tao and Li, Hui},
  booktitle={2019 ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS)},
  title={TabTree: A TSS-assisted Bit-selecting Tree Scheme for Packet Classification with Balanced Rule Mapping},
  year={2019},
  volume={},
  number={},
  pages={1-8},
  doi={10.1109/ANCS.2019.8901884},
  url={https://doi.org/10.1109/ANCS.2019.8901884}
}

% alternate url
% https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-pfaff.pdf
% Andy file name
% 2015-pfaff-et-al-the-design-and-implementation-of-open-vswitch.pdf
@inproceedings{PPKJ+2015,
author = {Pfaff, Ben and Pettit, Justin and Koponen, Teemu and Jackson, Ethan J. and Zhou, Andy and Rajahalme, Jarno and Gross, Jesse and Wang, Alex and Stringer, Jonathan and Shelar, Pravin and Amidon, Keith and Casado, Mart\'{\i}n},
title = {The Design and Implementation of Open VSwitch},
year = {2015},
isbn = {9781931971218},
publisher = {USENIX Association},
address = {USA},
abstract = {We describe the design and implementation of Open vSwitch, a multi-layer, open source virtual switch for all major hypervisor platforms. Open vSwitch was designed de novo for networking in virtual environments, resulting in major design departures from traditional software switching architectures. We detail the advanced flow classification and caching techniques that Open vSwitch uses to optimize its operations and conserve hypervisor resources. We evaluate Open vSwitch performance, drawing from our deployment experiences over the past seven years of using and improving Open vSwitch.},
booktitle = {Proceedings of the 12th USENIX Conference on Networked Systems Design and Implementation},
pages = {117–130},
numpages = {14},
location = {Oakland, CA},
series = {NSDI'15},
url = {https://www.usenix.org/conference/nsdi15/technical-sessions/presentation/pfaff}
}

% alternate url
% https://dl.ifip.org/db/conf/networking/networking2021/1570699241.pdf
% Andy file name
% 2021-zhang-et-al-multilayertuple-a-general-scalable-and-high-performance-packet-classification-algorithm-for-software-defined-network-system.pdf
@INPROCEEDINGS{XZ2021,
  author={Zhang, Chunyang and Xie, Gaogang},
  booktitle={2021 IFIP Networking Conference (IFIP Networking)},
  title={MultilayerTuple: A General, Scalable and High-performance Packet Classification Algorithm for Software Defined Network System},
  year={2021},
  volume={},
  number={},
  pages={1-9},
  doi={10.23919/IFIPNetworking52078.2021.9472824},
  url={https://doi.org/10.23919/IFIPNetworking52078.2021.9472824}
}

% Andy file name
% todo
@ARTICLE{YGFQL2022,
  author={Yang, Meiyi and Gao, Deyun and Foh, Chuan Heng and Qin, Yajuan and Leung, Victor C. M.},
  journal={IEEE Transactions on Network and Service Management},
  title={A Learned Bloom Filter-Assisted Scheme for Packet Classification in Software-Defined Networking},
  year={2022},
  volume={19},
  number={4},
  pages={5064-5077},
  doi={10.1109/TNSM.2022.3181063},
  url={https://doi.org/10.1109/TNSM.2022.3181063}
}

% Andy file name
% 2005-song-et-al-fast-hash-table-lookup-using-extended-bloom-filter-an-aid-to-network-processing.pdf
@inproceedings{SDTL2005,
author = {Song, Haoyu and Dharmapurikar, Sarang and Turner, Jonathan and Lockwood, John},
title = {Fast Hash Table Lookup Using Extended Bloom Filter: An Aid to Network Processing},
year = {2005},
isbn = {1595930094},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1080091.1080114},
doi = {10.1145/1080091.1080114},
abstract = {Hash tables are fundamental components of several network processing algorithms and applications, including route lookup, packet classification, per-flow state management and network monitoring. These applications, which typically occur in the data-path of high-speed routers, must process and forward packets with little or no buffer, making it important to maintain wire-speed throughout. A poorly designed hash table can critically affect the worst-case throughput of an application, since the number of memory accesses required for each lookup can vary. Hence, high throughput applications require hash tables with more predictable worst-case lookup performance. While published papers often assume that hash table lookups take constant time, there is significant variation in the number of items that must be accessed in a typical hash table search, leading to search times that vary by a factor of four or more.We present a novel hash table data structure and lookup algorithm which improves the performance over a naive hash table by reducing the number of memory accesses needed for the most time-consuming lookups. This allows designers to achieve higher lookup performance for a given memory bandwidth, without requiring large amounts of buffering in front of the lookup engine. Our algorithm extends the multiple-hashing Bloom Filter data structure to support exact matches and exploits recent advances in embedded memory technology. Through a combination of analysis and simulations we show that our algorithm is significantly faster than a naive hash table using the same amount of memory, hence it can support better throughput for router applications that use hash tables.},
booktitle = {Proceedings of the 2005 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
pages = {181–192},
numpages = {12},
keywords = {hash table, forwarding},
location = {Philadelphia, Pennsylvania, USA},
series = {SIGCOMM '05}
}

% Andy file name
% todo
@article{AA2020,
title = {Common non-wildcard portion-based partitioning approach to SDN many-field packet classification},
journal = {Computer Networks},
volume = {181},
pages = {107534},
year = {2020},
issn = {1389-1286},
doi = {https://doi.org/10.1016/j.comnet.2020.107534},
url = {https://www.sciencedirect.com/science/article/pii/S1389128620311890},
author = {Hamed Alimohammadi and Mahmood Ahmadi},
keywords = {Non-wildcard portion-based partitioning, Many-field packet classification, SDN switch},
abstract = {Many-field packet classification is a challenging function of the devices in software-defined networking. In this paper, we propose a new algorithm, which partitions a ruleset in a simple way based on non-wildcard portions of the rules. A portion can be a field or a sub-field. The algorithm uses hash tables as the base data structure. In a partition, all the members have a common non-wildcard portion, which is used as the hash key. It means that only a portion of the rules and headers is used for hashing. It simplifies using the hash table for packet classification, which deals with the ternary vectors. The proposed algorithm supports fast updating as a required feature for most of today’s networks. Extensive simulations are conducted to evaluate the algorithm and compare it with well-known algorithms. Results show that the proposed algorithm has a 196\% higher throughput and 81\% faster update than Tuple Space Search as the base classification algorithm of OpenVSwitch.}
}

% alternate url
% https://www.cse.msu.edu/~dalyjame/papers/ByteCuts.pdf
% Andy file name
% 2018-daly-et-al-bytecuts-fast-packet-classification-by-interior-bit-extraction.pdf
@INPROCEEDINGS{DT2018,
  author={Daly, James and Torng, Eric},
  booktitle={IEEE INFOCOM 2018 - IEEE Conference on Computer Communications},
  title={ByteCuts: Fast Packet Classification by Interior Bit Extraction},
  year={2018},
  volume={},
  number={},
  pages={2654-2662},
  doi={10.1109/INFOCOM.2018.8486215},
  url={https://doi.org/10.1109/INFOCOM.2018.8486215}
}

% Andy file name
% todo
@ARTICLE{LYRL+2020,
  author={Li, Wenjun and Yang, Tong and Rottenstreich, Ori and Li, Xianfeng and Xie, Gaogang and Li, Hui and Vamanan, Balajee and Li, Dagang and Lin, Huiping},
  journal={IEEE Journal on Selected Areas in Communications},
  title={Tuple Space Assisted Packet Classification With High Performance on Both Search and Update},
  year={2020},
  volume={38},
  number={7},
  pages={1555-1569},
  doi={10.1109/JSAC.2020.2986935},
  url={https://doi.org/10.1109/JSAC.2020.2986935}
}

% Andy file name
% todo
@ARTICLE{LK2010,
  author={Lim, Hyesook and Kim, So Yeon},
  journal={IEEE Micro},
  title={Tuple Pruning Using Bloom Filters for Packet Classification},
  year={2010},
  volume={30},
  number={3},
  pages={48-59},
  doi={10.1109/MM.2010.44},
  url={https://doi.org/10.1109/MM.2010.44}
}

% Andy file name
% todo
@ARTICLE{Chang2009,
  author={Chang, Yeim-Kuan},
  journal={IEEE Transactions on Computers},
  title={Efficient Multidimensional Packet Classification with Fast Updates},
  year={2009},
  volume={58},
  number={4},
  pages={463-479},
  doi={10.1109/TC.2008.181},
  url={https://doi.org/10.1109/TC.2008.181}
}

% Andy file name
% todo
@ARTICLE{CH2016,
  author={Chang, Yeim-Kuan and Hsueh, Chun-Sheng},
  journal={IEEE Transactions on Emerging Topics in Computing},
  title={Range-Enhanced Packet Classification Design on FPGA},
  year={2016},
  volume={4},
  number={2},
  pages={214-224},
  doi={10.1109/TETC.2015.2449666},
  url={https://doi.org/10.1109/TETC.2015.2449666}
}

% Andy file name
% todo
@INPROCEEDINGS{FHSM2016,
  author={Fiessler, Andreas and Hager, Sven and Scheuermann, Björn and Moore, Andrew W.},
  booktitle={2016 ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS)},
  title={HyPaFilter — A versatile hybrid FPGA packet filter},
  year={2016},
  volume={},
  number={},
  pages={25-36},
  doi={10.1145/2881025.2881033},
  url={https://doi.org/10.1145/2881025.2881033}
}

@INPROCEEDINGS{GPPR2005,
  author={Geraci, F. and Pellegrini, M. and Pisati, P. and Rizzo, L.},
  booktitle={Proceedings IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies.},
  title={Packet classification via improved space decomposition techniques},
  year={2005},
  volume={1},
  number={},
  pages={304-312 vol. 1},
  doi={10.1109/INFCOM.2005.1497901},
  url={https://doi.org/10.1109/INFCOM.2005.1497901}
}

% Andy file name
% 2020-chen-et-al-catcam-constant-time-alteration-ternary-cam-with-scalable-in-memory-architecture.pdf
@INPROCEEDINGS{CLXL+2020,
  author={Chen, Dibei and Li, Zhaoshi and Xiong, Tianzhu and Liu, Zhiwei and Yang, Jun and Yin, Shouyi and Wei, Shaojun and Liu, Leibo},
  booktitle={2020 53rd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)},
  title={CATCAM: Constant-time Alteration Ternary CAM with Scalable In-Memory Architecture},
  year={2020},
  volume={},
  number={},
  pages={342-355},
  doi={10.1109/MICRO50266.2020.00038},
  url={https://doi.org/10.1109/MICRO50266.2020.00038}
}

% Andy file name
% todo
@inproceedings{LLLYW2019,
author = {Li, Chenglong and Li, Tao and Li, Junnan and Yang, Hui and Wang, Baosheng},
title = {A Memory Optimized Architecture for Multi-Field Packet Classification (Brief Announcement)},
year = {2019},
isbn = {9781450361842},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3323165.3323171},
doi = {10.1145/3323165.3323171},
abstract = {The high-performance hardware architectures for multi-field packet classification have been studied over the past decade. Although many FPGA-based solutions can achieve very high throughput, the limited FPGA resources severely hinders the scalability of the rulesets or matching fields. To address this issue, we present a parallel architecture named Wildcard-removed Two-dimensional Pipeline (WeeTP) to save memory usage of wildcards and reduce logic resources. WeeTP uses the Maximum Wildcard Overlap (MWO) algorithm to maximize the compression percentage by rearranging the ruleset. We implement and evaluate WeeTP on an Intel STRATIX V FPGA. Experimental results show that our approach can save 37\% and 41\% memory consumption on average for real 5-tuple rules and OpenFlow rules, respectively.},
booktitle = {The 31st ACM Symposium on Parallelism in Algorithms and Architectures},
pages = {395–397},
numpages = {3},
keywords = {fpga, packet classification, two-dimensional pipeline, wildcard compression},
location = {Phoenix, AZ, USA},
series = {SPAA '19}
}

% Andy file name
% todo
% see also revised tech report with corrections: RTKMH2014
@inproceedings{RTKMH2013,
author = {R\'{e}tv\'{a}ri, G\'{a}bor and Tapolcai, J\'{a}nos and K\H{o}r\"{o}si, Attila and Majd\'{a}n, Andr\'{a}s and Heszberger, Zal\'{a}n},
title = {Compressing IP forwarding tables: towards entropy bounds and beyond},
year = {2013},
isbn = {9781450320566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2486001.2486009},
doi = {10.1145/2486001.2486009},
abstract = {Lately, there has been an upsurge of interest in compressed data structures, aiming to pack ever larger quantities of information into constrained memory without sacrificing the efficiency of standard operations, like random access, search, or update. The main goal of this paper is to demonstrate how data compression can benefit the networking community, by showing how to squeeze the IP Forwarding Information Base (FIB), the giant table consulted by IP routers to make forwarding decisions, into information-theoretical entropy bounds, with essentially zero cost on longest prefix match and FIB update. First, we adopt the state-of-the-art in compressed data structures, yielding a static entropy-compressed FIB representation with asymptotically optimal lookup. Then, we re-design the venerable prefix tree, used commonly for IP lookup for at least 20 years in IP routers, to also admit entropy bounds and support lookup in optimal time and update in nearly optimal time. Evaluations on a Linux kernel prototype indicate that our compressors encode a FIB comprising more than 440K prefixes to just about 100--400 KBytes of memory, with a threefold increase in lookup throughput and no penalty on FIB updates.},
booktitle = {Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM},
pages = {111–122},
numpages = {12},
keywords = {data compression, ip forwarding table lookup, prefix tree},
location = {Hong Kong, China},
series = {SIGCOMM '13}
}

% Andy file name
% 2014-retvari-et-al-compressing-ip-forwarding-tables-towards-entropy-bounds-and-beyond-tech-report.pdf
@Techreport{RTKMH2014,
  author={Rétvári, Gábor and Tapolcai, János and Kőrösi, Attila and Majdán, András and Heszberger, Zalán},
  year =         "2014",
  title={Compressing IP forwarding tables: towards entropy bounds and beyond - A revised technical report},
  institution =  "Budapest University of Technology and Economics",
  type =         "",
  number =       "",
  address =      "",
  month =        "February",
  note =         "",
  url={https://arxiv.org/abs/1402.1194}
}

% Andy file name
% todo
@article{DVS1995,
title = {Two-Dimensional and Three-Dimensional Point Location in Rectangular Subdivisions},
journal = {Journal of Algorithms},
volume = {18},
number = {2},
pages = {256-277},
year = {1995},
issn = {0196-6774},
doi = {https://doi.org/10.1006/jagm.1995.1010},
url = {https://www.sciencedirect.com/science/article/pii/S0196677485710103},
author = {M. Deberg and M. Vankreveld and J. Snoeyink},
abstract = {We apply van Emde Boas-type stratified trees to point location problems in rectangular subdivisions in 2 and 3 dimensions. In a subdivision with n rectangles having integer coordinates from [0, U − 1], we locate an integer query point in O((log log U)d) query time using O(n) space when d ≤ 2 or O(n log log U) space when d = 3. Applications and extensions of this "fixed universe" approach include spatial point location using logarithmic time and linear space in rectilinear subdivisions having arbitrary coordinates, point location in c-oriented polygons or fat triangles in the plane, point location in subdivisions of space into "fat prisms," and vertical ray shooting among horizontal "fat objects." Like other results on stratified trees, our algorithms run on a RAM model and make use of perfect hashing.}
}

% Andy file name
% 2022-chan-et-al-orthogonal-point-location-and-rectangle-stabbing-queries-in-3-d.pdf
@article{CNRT2022,
title = {Orthogonal point location and rectangle stabbing queries in 3-d},
journal = {Journal of Computational Geometry},
volume = {13},
number = {1},
pages = {399-428},
year = {2022},
issn = {0196-6774},
doi = {https://doi.org/10.20382/jocg.v13i1a15},
url = {https://jocg.org/index.php/jocg/article/view/4009},
author = {Timothy M. Chan and Yakov Nekrich and Saladi Rahul and Konstantinos Tsakalidis}
}

% alternate url
% https://users.umiacs.umd.edu/~joseph/ffc-crc.pdf
% Andy file name
% 2005-shi-et-al-novel-transformation-techniques-using-q-heaps-with-applications-to-computational-geometry.pdf
% In this paper, the problem of interest to me is called
% "rectangular point enclosure".
% Theorem 5.2: There exists a linear-space algorithm to handle the
% rectangle point enclosure queries in $O(log n/ log log n + f)$ time,
% where $f$ is the number of segments reported.
@article{SJ2005,
author = {Shi, Qingmin and JaJa, Joseph},
title = {Novel Transformation Techniques Using Q-Heaps with Applications to Computational Geometry},
journal = {SIAM Journal on Computing},
volume = {34},
number = {6},
pages = {1474-1492},
year = {2005},
doi = {10.1137/S0097539703435728},
URL = {https://doi.org/10.1137/S0097539703435728},
eprint = {https://doi.org/10.1137/S0097539703435728},
abstract = { Using the notions of Q-heaps and fusion trees developed by Fredman and Willard, we develop general transformation techniques to reduce a number of computational geometry problems to their special versions in partially ranked spaces. In particular, we develop a fast fractional cascading technique, which uses linear space and enables sublogarithmic iterative search on catalog trees in the case when the degree of each node is bounded by \$O(\log^{\epsilon}n)\$ for some constant \$\epsilon >0\$, where n is the total size of allthe lists stored in the tree. We apply the fast fractional cascading technique in combination with the other techniques to derive the first linear-space sublogarithmic time algorithms for two fundamental geometric retrieval problems: orthogonal segment intersection and rectangular point enclosure.}
}

% Andy file name
% 2005-schieber-et-al-computing-the-minimum-dnf-representation-of-boolean-functions-defined-by-ranges.pdf
@article{SGZ2005,
title = {Computing the minimum DNF representation of Boolean functions defined by intervals},
journal = {Discrete Applied Mathematics},
volume = {149},
number = {1},
pages = {154-173},
year = {2005},
note = {Boolean and Pseudo-Boolean Functions},
issn = {0166-218X},
doi = {https://doi.org/10.1016/j.dam.2004.08.009},
url = {https://www.sciencedirect.com/science/article/pii/S0166218X05000752},
author = {Baruch Schieber and Daniel Geist and Ayal Zaks},
keywords = {Constraint satisfaction, Automatic test generation, Boolean function, DNF, Disjunctive normal form},
abstract = {For any two n-bit numbers a⩽b define the Boolean function f[a,b]:{0,1}n→{0,1} to be the function for which f[a,b](x)=1 if and only if x is the binary representation of a number in the interval [a,b]. We consider the disjunctive normal form representation of such functions, and show how to compute such a representation with a minimum number of disjuncts in linear time. We also show how to compute a minimum “disjoint” representation; i.e., a representation in which the domains of the disjuncts are mutually disjoint. The minimum disjunctive normal form can be applied to devise efficient constraint satisfaction systems for automatic generation of test patterns.}
}

% Andy file name
% todo
@INPROCEEDINGS{QVS2001,
  author={Lili Qiu and George Varghese and Subhash Suri},
  booktitle={Proceedings Ninth International Conference on Network Protocols. ICNP 2001},
  title={Fast firewall implementations for software and hardware-based routers},
  year={2001},
  volume={},
  number={},
  pages={241-250},
  keywords={Databases;Filters;Diffserv networks;Pipeline processing;Cost function;Compression algorithms;Resource management;Sun;Access control;Spine},
  doi={10.1109/ICNP.2001.992904},
  url={https://doi.org/10.1109/ICNP.2001.992904}
}

% Andy file name
% todo
@article{KKYV2007,
title = {Two stage packet classification using most specific filter matching and transport level sharing},
journal = {Computer Networks},
volume = {51},
number = {18},
pages = {4951-4978},
year = {2007},
issn = {1389-1286},
doi = {https://doi.org/10.1016/j.comnet.2007.08.004},
url = {https://www.sciencedirect.com/science/article/pii/S1389128607002265},
author = {Michael E. Kounavis and Alok Kumar and Raj Yavatkar and Harrick Vin},
keywords = {Switches, Routers, Packet classification, Most specific filter matching, Transport level sharing},
abstract = {In this paper we introduce two new concepts to the design of packet classification systems. First, we propose most specific filter matching (MSFM), an improvement over the well known Cross Producting algorithm [V. Srinivasan, S. Suri, G. Varghese, M. Waldvogel, Fast and scalable layer four switching, in: Proceedings of ACM SIGCOMM, 1998] that significantly reduces the memory requirement of the earlier scheme. Second, we suggest that rules specifying the same source–destination IP prefix pair can be grouped together forming shared sets of transport level fields. This property of Transport Level Sharing (TLS), which characterizes real world classification databases is exploited for reducing a classifier’s memory requirement and for hardware acceleration. We split the classification process into two stages. First, we perform classification on source–destination IP prefix pairs using the MSFM algorithm. Second, we perform classification on transport level fields exploiting transport level sharing. It is the combination of most specific filter matching and transport level sharing which results in a scheme that requires no more than 11 dependent memory accesses in the critical path independent of the size of the classification database. The memory access bandwidth of our scheme is also bounded when our scheme is accelerated in hardware. Compared to other schemes which involve a small and predictable number of steps in the critical path (e.g., Cross Producting [V. Srinivasan, S. Suri, G. Varghese, M. Waldvogel, Fast and scalable layer four switching, in: Proceedings of ACM SIGCOMM, 1998] or Recursive Flow Classification [P. Gupta, N. McKeown, Packet classification on multiple fields, in: Proceedings of ACM SIGCOMM, 1999]) the combination of most specific filter matching and transport level sharing is associated with the least memory requirement.}
}

% This is just a 1-page abstract, not a full paper
% 2002-li-et-al-afbv-a-scalable-packet-classification-algorithm.pdf
